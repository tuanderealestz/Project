
THICUOIKY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047bc  080047bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080047bc  080047bc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047bc  080047bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047bc  080047bc  000147bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080047c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000005c  08004820  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08004820  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e45  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d69  00000000  00000000  00029f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cc  00000000  00000000  0002c7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a404  00000000  00000000  0002d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d7ca  00000000  00000000  000474b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c0d4  00000000  00000000  00054c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034ec  00000000  00000000  000f0d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000f4244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000005c 	.word	0x2000005c
 8000204:	00000000 	.word	0x00000000
 8000208:	08004714 	.word	0x08004714

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000060 	.word	0x20000060
 8000224:	08004714 	.word	0x08004714

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <LCD_sendCmd>:
#include "../Inc/lcd.h"
#include "stdio.h"
#include "stdarg.h"

void LCD_sendCmd( uint8_t data) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <LCD_sendCmd+0x28>)
 8000a26:	f001 fd7f 	bl	8002528 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f000 f861 	bl	8000af4 <LCD_sendByte>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40011000 	.word	0x40011000

08000a40 <LCD_sendChar>:

void LCD_sendChar(uint8_t data) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a50:	4805      	ldr	r0, [pc, #20]	; (8000a68 <LCD_sendChar+0x28>)
 8000a52:	f001 fd69 	bl	8002528 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f000 f84b 	bl	8000af4 <LCD_sendByte>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40011000 	.word	0x40011000

08000a6c <LCD_sendNibble>:

void LCD_sendNibble(uint8_t data) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2110      	movs	r1, #16
 8000a82:	481b      	ldr	r0, [pc, #108]	; (8000af0 <LCD_sendNibble+0x84>)
 8000a84:	f001 fd50 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	105b      	asrs	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	461a      	mov	r2, r3
 8000a96:	2120      	movs	r1, #32
 8000a98:	4815      	ldr	r0, [pc, #84]	; (8000af0 <LCD_sendNibble+0x84>)
 8000a9a:	f001 fd45 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	109b      	asrs	r3, r3, #2
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4810      	ldr	r0, [pc, #64]	; (8000af0 <LCD_sendNibble+0x84>)
 8000ab0:	f001 fd3a 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	10db      	asrs	r3, r3, #3
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <LCD_sendNibble+0x84>)
 8000ac6:	f001 fd2f 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ad0:	4807      	ldr	r0, [pc, #28]	; (8000af0 <LCD_sendNibble+0x84>)
 8000ad2:	f001 fd29 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f000 fd9e 	bl	8001618 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae2:	4803      	ldr	r0, [pc, #12]	; (8000af0 <LCD_sendNibble+0x84>)
 8000ae4:	f001 fd20 	bl	8002528 <HAL_GPIO_WritePin>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40011000 	.word	0x40011000

08000af4 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
    LCD_sendNibble(data >> 4); // High order bit
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffb1 	bl	8000a6c <LCD_sendNibble>
    LCD_sendNibble(data); // Low order bit
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ffad 	bl	8000a6c <LCD_sendNibble>
}
 8000b12:	bf00      	nop
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <LCD_puts>:

void LCD_puts(char * data) {
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b082      	sub	sp, #8
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	6078      	str	r0, [r7, #4]
    while (data[0] != '\0') {
 8000b22:	e007      	b.n	8000b34 <LCD_puts+0x1a>
        LCD_sendChar(data[0]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff89 	bl	8000a40 <LCD_sendChar>
        data++;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	3301      	adds	r3, #1
 8000b32:	607b      	str	r3, [r7, #4]
    while (data[0] != '\0') {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d1f3      	bne.n	8000b24 <LCD_puts+0xa>
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <LCD_init>:

void LCD_init(){
 8000b46:	b580      	push	{r7, lr}
 8000b48:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x33); // Initialize controller
 8000b4a:	2033      	movs	r0, #51	; 0x33
 8000b4c:	f7ff ff62 	bl	8000a14 <LCD_sendCmd>
    LCD_sendCmd(0x32); // Set 4-bit mode
 8000b50:	2032      	movs	r0, #50	; 0x32
 8000b52:	f7ff ff5f 	bl	8000a14 <LCD_sendCmd>
    LCD_sendCmd(0x28); // 4 bit, 2 line, 5x7
 8000b56:	2028      	movs	r0, #40	; 0x28
 8000b58:	f7ff ff5c 	bl	8000a14 <LCD_sendCmd>
    LCD_sendCmd(0x06); // Cursor direction -> right
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f7ff ff59 	bl	8000a14 <LCD_sendCmd>
    LCD_sendCmd(0x0C); // Display on, cursor off
 8000b62:	200c      	movs	r0, #12
 8000b64:	f7ff ff56 	bl	8000a14 <LCD_sendCmd>
    LCD_sendCmd(0x01); // Clear display
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f7ff ff53 	bl	8000a14 <LCD_sendCmd>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <LCD_clear>:

void LCD_clear(){
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x01);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff ff4c 	bl	8000a14 <LCD_sendCmd>
    HAL_Delay(2);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f000 fd4b 	bl	8001618 <HAL_Delay>
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <LCD_setCursor>:

void LCD_setCursor(char row, char col){
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	460a      	mov	r2, r1
 8000b90:	71fb      	strb	r3, [r7, #7]
 8000b92:	4613      	mov	r3, r2
 8000b94:	71bb      	strb	r3, [r7, #6]
	char val = (row == 0) ? 0x00: 0x40;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d101      	bne.n	8000ba0 <LCD_setCursor+0x1a>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e000      	b.n	8000ba2 <LCD_setCursor+0x1c>
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	73fb      	strb	r3, [r7, #15]
	val += col;
 8000ba4:	7bfa      	ldrb	r2, [r7, #15]
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	4413      	add	r3, r2
 8000baa:	73fb      	strb	r3, [r7, #15]
	LCD_sendCmd(LCD_SETDDRAMADDR | val );
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff2d 	bl	8000a14 <LCD_sendCmd>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <LCD_printf>:
		LCD_sendCmd(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
	}
}

int LCD_printf(const char* fmt,...)
{
 8000bc4:	b40f      	push	{r0, r1, r2, r3}
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
	int done;
	va_list args;
	static char buffer[256];
	va_start(args,fmt);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	603b      	str	r3, [r7, #0]

	done = vsnprintf(buffer,256,fmt,args);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bda:	4807      	ldr	r0, [pc, #28]	; (8000bf8 <LCD_printf+0x34>)
 8000bdc:	f003 f8fa 	bl	8003dd4 <vsniprintf>
 8000be0:	6078      	str	r0, [r7, #4]

	LCD_puts(buffer);
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <LCD_printf+0x34>)
 8000be4:	f7ff ff99 	bl	8000b1a <LCD_puts>

	va_end(args);
	return done;
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr
 8000bf8:	20000078 	.word	0x20000078
 8000bfc:	00000000 	.word	0x00000000

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 fca5 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f8df 	bl	8000dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f000 fa99 	bl	8001144 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c12:	f000 f92d 	bl	8000e70 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000c16:	f000 f969 	bl	8000eec <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c1a:	f000 fa07 	bl	800102c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 8000c1e:	f7ff ff92 	bl	8000b46 <LCD_init>
  LCD_clear();
 8000c22:	f7ff ffa6 	bl	8000b72 <LCD_clear>

  uint16_t value;
  HAL_Delay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f000 fcf5 	bl	8001618 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000c2e:	485e      	ldr	r0, [pc, #376]	; (8000da8 <main+0x1a8>)
 8000c30:	f001 f954 	bl	8001edc <HAL_ADCEx_Calibration_Start>
  int t;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c34:	2100      	movs	r1, #0
 8000c36:	485d      	ldr	r0, [pc, #372]	; (8000dac <main+0x1ac>)
 8000c38:	f002 fac0 	bl	80031bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000c3c:	2104      	movs	r1, #4
 8000c3e:	485b      	ldr	r0, [pc, #364]	; (8000dac <main+0x1ac>)
 8000c40:	f002 fabc 	bl	80031bc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c44:	2108      	movs	r1, #8
 8000c46:	4859      	ldr	r0, [pc, #356]	; (8000dac <main+0x1ac>)
 8000c48:	f002 fab8 	bl	80031bc <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    /* USER CODE END WHILE */
		HAL_ADC_Start(&hadc1);
 8000c4c:	4856      	ldr	r0, [pc, #344]	; (8000da8 <main+0x1a8>)
 8000c4e:	f000 fdf1 	bl	8001834 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000c52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000c56:	4854      	ldr	r0, [pc, #336]	; (8000da8 <main+0x1a8>)
 8000c58:	f000 fe9a 	bl	8001990 <HAL_ADC_PollForConversion>
		value = HAL_ADC_GetValue(&hadc1);
 8000c5c:	4852      	ldr	r0, [pc, #328]	; (8000da8 <main+0x1a8>)
 8000c5e:	f000 ff9d 	bl	8001b9c <HAL_ADC_GetValue>
 8000c62:	4603      	mov	r3, r0
 8000c64:	817b      	strh	r3, [r7, #10]
		t = (value/4096.0)*3.3*100.0;
 8000c66:	897b      	ldrh	r3, [r7, #10]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fc2f 	bl	80004cc <__aeabi_i2d>
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <main+0x1b0>)
 8000c74:	f7ff fdbe 	bl	80007f4 <__aeabi_ddiv>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	a347      	add	r3, pc, #284	; (adr r3, 8000da0 <main+0x1a0>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fc8b 	bl	80005a0 <__aeabi_dmul>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <main+0x1b4>)
 8000c98:	f7ff fc82 	bl	80005a0 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fe8e 	bl	80009c4 <__aeabi_d2iz>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	607b      	str	r3, [r7, #4]
		LCD_setCursor(0, 4);
 8000cac:	2104      	movs	r1, #4
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff ff69 	bl	8000b86 <LCD_setCursor>
		LCD_printf("T = %d",t);
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	4840      	ldr	r0, [pc, #256]	; (8000db8 <main+0x1b8>)
 8000cb8:	f7ff ff84 	bl	8000bc4 <LCD_printf>
		if(t > 37)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b25      	cmp	r3, #37	; 0x25
 8000cc0:	dd2c      	ble.n	8000d1c <main+0x11c>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc8:	483c      	ldr	r0, [pc, #240]	; (8000dbc <main+0x1bc>)
 8000cca:	f001 fc2d 	bl	8002528 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000cce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cd2:	f000 fca1 	bl	8001618 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cdc:	4837      	ldr	r0, [pc, #220]	; (8000dbc <main+0x1bc>)
 8000cde:	f001 fc23 	bl	8002528 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8000ce2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ce6:	f000 fc97 	bl	8001618 <HAL_Delay>
			LCD_setCursor(1, 4);
 8000cea:	2104      	movs	r1, #4
 8000cec:	2001      	movs	r0, #1
 8000cee:	f7ff ff4a 	bl	8000b86 <LCD_setCursor>
			LCD_printf("HOT");
 8000cf2:	4833      	ldr	r0, [pc, #204]	; (8000dc0 <main+0x1c0>)
 8000cf4:	f7ff ff66 	bl	8000bc4 <LCD_printf>
			// Nhay led do
			for(int i = 999; i >= 0; i--)
 8000cf8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	e009      	b.n	8000d14 <main+0x114>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 8000d00:	4b2a      	ldr	r3, [pc, #168]	; (8000dac <main+0x1ac>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fc85 	bl	8001618 <HAL_Delay>
			for(int i = 999; i >= 0; i--)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	daf2      	bge.n	8000d00 <main+0x100>
 8000d1a:	e797      	b.n	8000c4c <main+0x4c>
			}
		}
		else if(t > 30 && t < 37 )
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b1e      	cmp	r3, #30
 8000d20:	dd1f      	ble.n	8000d62 <main+0x162>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b24      	cmp	r3, #36	; 0x24
 8000d26:	dc1c      	bgt.n	8000d62 <main+0x162>
		{
			LCD_setCursor(1, 4);
 8000d28:	2104      	movs	r1, #4
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff ff2b 	bl	8000b86 <LCD_setCursor>
			LCD_printf("NORMAL");
 8000d30:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <main+0x1c4>)
 8000d32:	f7ff ff47 	bl	8000bc4 <LCD_printf>
			for(int i = 999; i >= 0; i--)
 8000d36:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	e00d      	b.n	8000d5a <main+0x15a>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <main+0x1ac>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,i);
 8000d46:	4b19      	ldr	r3, [pc, #100]	; (8000dac <main+0x1ac>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f000 fc62 	bl	8001618 <HAL_Delay>
			for(int i = 999; i >= 0; i--)
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	daee      	bge.n	8000d3e <main+0x13e>
 8000d60:	e01b      	b.n	8000d9a <main+0x19a>
			}
		}
		else
		{
			LCD_setCursor(1, 4);
 8000d62:	2104      	movs	r1, #4
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ff0e 	bl	8000b86 <LCD_setCursor>
			LCD_printf("COLD");
 8000d6a:	4817      	ldr	r0, [pc, #92]	; (8000dc8 <main+0x1c8>)
 8000d6c:	f7ff ff2a 	bl	8000bc4 <LCD_printf>
			for(int i = 999; i >= 0; i--)
 8000d70:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	e00d      	b.n	8000d94 <main+0x194>
			{
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,i);
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <main+0x1ac>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,i);
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <main+0x1ac>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	68fa      	ldr	r2, [r7, #12]
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
				HAL_Delay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 fc45 	bl	8001618 <HAL_Delay>
			for(int i = 999; i >= 0; i--)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	daee      	bge.n	8000d78 <main+0x178>
		HAL_ADC_Start(&hadc1);
 8000d9a:	e757      	b.n	8000c4c <main+0x4c>
 8000d9c:	f3af 8000 	nop.w
 8000da0:	66666666 	.word	0x66666666
 8000da4:	400a6666 	.word	0x400a6666
 8000da8:	20000178 	.word	0x20000178
 8000dac:	200001f0 	.word	0x200001f0
 8000db0:	40b00000 	.word	0x40b00000
 8000db4:	40590000 	.word	0x40590000
 8000db8:	0800472c 	.word	0x0800472c
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	08004734 	.word	0x08004734
 8000dc4:	08004738 	.word	0x08004738
 8000dc8:	08004740 	.word	0x08004740

08000dcc <SystemClock_Config>:

  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b096      	sub	sp, #88	; 0x58
 8000dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dd6:	2228      	movs	r2, #40	; 0x28
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f003 f808 	bl	8003df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]
 8000dfe:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e04:	2301      	movs	r3, #1
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e08:	2310      	movs	r3, #16
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fb9f 	bl	8002558 <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e20:	f000 f9e8 	bl	80011f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e24:	230f      	movs	r3, #15
 8000e26:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f001 fe0c 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e4a:	f000 f9d3 	bl	80011f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f001 ff79 	bl	8002d50 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e64:	f000 f9c6 	bl	80011f4 <Error_Handler>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3758      	adds	r7, #88	; 0x58
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000e82:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <MX_ADC1_Init+0x78>)
 8000e84:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000e9a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eac:	480d      	ldr	r0, [pc, #52]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000eae:	f000 fbd7 	bl	8001660 <HAL_ADC_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000eb8:	f000 f99c 	bl	80011f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_ADC1_Init+0x74>)
 8000ece:	f000 fe71 	bl	8001bb4 <HAL_ADC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ed8:	f000 f98c 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000178 	.word	0x20000178
 8000ee8:	40012400 	.word	0x40012400

08000eec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b096      	sub	sp, #88	; 0x58
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f00:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]
 8000f1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2220      	movs	r2, #32
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f002 ff63 	bl	8003df0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f2c:	4a3e      	ldr	r2, [pc, #248]	; (8001028 <MX_TIM1_Init+0x13c>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4e:	4b35      	ldr	r3, [pc, #212]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f54:	4833      	ldr	r0, [pc, #204]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f56:	f002 f889 	bl	800306c <HAL_TIM_Base_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f60:	f000 f948 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f6e:	4619      	mov	r1, r3
 8000f70:	482c      	ldr	r0, [pc, #176]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f72:	f002 fa9f 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f7c:	f000 f93a 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <MX_TIM1_Init+0x138>)
 8000f82:	f002 f8c2 	bl	800310a <HAL_TIM_PWM_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f8c:	f000 f932 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f90:	2300      	movs	r3, #0
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <MX_TIM1_Init+0x138>)
 8000fa0:	f002 fe30 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000faa:	f000 f923 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fae:	2360      	movs	r3, #96	; 0x60
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	2200      	movs	r2, #0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4814      	ldr	r0, [pc, #80]	; (8001024 <MX_TIM1_Init+0x138>)
 8000fd4:	f002 f9ac 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fde:	f000 f909 	bl	80011f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4619      	mov	r1, r3
 8001004:	4807      	ldr	r0, [pc, #28]	; (8001024 <MX_TIM1_Init+0x138>)
 8001006:	f002 fe69 	bl	8003cdc <HAL_TIMEx_ConfigBreakDeadTime>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001010:	f000 f8f0 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <MX_TIM1_Init+0x138>)
 8001016:	f000 f991 	bl	800133c <HAL_TIM_MspPostInit>

}
 800101a:	bf00      	nop
 800101c:	3758      	adds	r7, #88	; 0x58
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001a8 	.word	0x200001a8
 8001028:	40012c00 	.word	0x40012c00

0800102c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001040:	f107 0320 	add.w	r3, r7, #32
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
 8001058:	615a      	str	r2, [r3, #20]
 800105a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800105c:	4b38      	ldr	r3, [pc, #224]	; (8001140 <MX_TIM2_Init+0x114>)
 800105e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001062:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001064:	4b36      	ldr	r3, [pc, #216]	; (8001140 <MX_TIM2_Init+0x114>)
 8001066:	2207      	movs	r2, #7
 8001068:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106a:	4b35      	ldr	r3, [pc, #212]	; (8001140 <MX_TIM2_Init+0x114>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001070:	4b33      	ldr	r3, [pc, #204]	; (8001140 <MX_TIM2_Init+0x114>)
 8001072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001076:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001078:	4b31      	ldr	r3, [pc, #196]	; (8001140 <MX_TIM2_Init+0x114>)
 800107a:	2200      	movs	r2, #0
 800107c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <MX_TIM2_Init+0x114>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001084:	482e      	ldr	r0, [pc, #184]	; (8001140 <MX_TIM2_Init+0x114>)
 8001086:	f001 fff1 	bl	800306c <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001090:	f000 f8b0 	bl	80011f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109e:	4619      	mov	r1, r3
 80010a0:	4827      	ldr	r0, [pc, #156]	; (8001140 <MX_TIM2_Init+0x114>)
 80010a2:	f002 fa07 	bl	80034b4 <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80010ac:	f000 f8a2 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010b0:	4823      	ldr	r0, [pc, #140]	; (8001140 <MX_TIM2_Init+0x114>)
 80010b2:	f002 f82a 	bl	800310a <HAL_TIM_PWM_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80010bc:	f000 f89a 	bl	80011f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4619      	mov	r1, r3
 80010ce:	481c      	ldr	r0, [pc, #112]	; (8001140 <MX_TIM2_Init+0x114>)
 80010d0:	f002 fd98 	bl	8003c04 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80010da:	f000 f88b 	bl	80011f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 80010e2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80010e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	2200      	movs	r2, #0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4812      	ldr	r0, [pc, #72]	; (8001140 <MX_TIM2_Init+0x114>)
 80010f8:	f002 f91a 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001102:	f000 f877 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2204      	movs	r2, #4
 800110a:	4619      	mov	r1, r3
 800110c:	480c      	ldr	r0, [pc, #48]	; (8001140 <MX_TIM2_Init+0x114>)
 800110e:	f002 f90f 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001118:	f000 f86c 	bl	80011f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	2208      	movs	r2, #8
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <MX_TIM2_Init+0x114>)
 8001124:	f002 f904 	bl	8003330 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800112e:	f000 f861 	bl	80011f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001132:	4803      	ldr	r0, [pc, #12]	; (8001140 <MX_TIM2_Init+0x114>)
 8001134:	f000 f902 	bl	800133c <HAL_TIM_MspPostInit>

}
 8001138:	bf00      	nop
 800113a:	3738      	adds	r7, #56	; 0x38
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200001f0 	.word	0x200001f0

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <MX_GPIO_Init+0xa8>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_GPIO_Init+0xa8>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <MX_GPIO_Init+0xa8>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0310 	and.w	r3, r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_GPIO_Init+0xa8>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a1d      	ldr	r2, [pc, #116]	; (80011ec <MX_GPIO_Init+0xa8>)
 8001176:	f043 0320 	orr.w	r3, r3, #32
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_GPIO_Init+0xa8>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f003 0320 	and.w	r3, r3, #32
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_GPIO_Init+0xa8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <MX_GPIO_Init+0xa8>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_GPIO_Init+0xa8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_GPIO_Init+0xa8>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <MX_GPIO_Init+0xa8>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_GPIO_Init+0xa8>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0xac>)
 80011c0:	f001 f9b2 	bl	8002528 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80011c4:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 80011c8:	613b      	str	r3, [r7, #16]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2302      	movs	r3, #2
 80011d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	4619      	mov	r1, r3
 80011dc:	4804      	ldr	r0, [pc, #16]	; (80011f0 <MX_GPIO_Init+0xac>)
 80011de:	f001 f80f 	bl	8002200 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e2:	bf00      	nop
 80011e4:	3720      	adds	r7, #32
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40011000 	.word	0x40011000

080011f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011fc:	e7fe      	b.n	80011fc <Error_Handler+0x8>
	...

08001200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_MspInit+0x5c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	4a14      	ldr	r2, [pc, #80]	; (800125c <HAL_MspInit+0x5c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6193      	str	r3, [r2, #24]
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_MspInit+0x5c>)
 8001214:	699b      	ldr	r3, [r3, #24]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <HAL_MspInit+0x5c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a0e      	ldr	r2, [pc, #56]	; (800125c <HAL_MspInit+0x5c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_MspInit+0x5c>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_MspInit+0x60>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <HAL_MspInit+0x60>)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000
 8001260:	40010000 	.word	0x40010000

08001264 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0310 	add.w	r3, r7, #16
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_ADC_MspInit+0x6c>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d121      	bne.n	80012c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_ADC_MspInit+0x70>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012b4:	2308      	movs	r3, #8
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b8:	2303      	movs	r3, #3
 80012ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HAL_ADC_MspInit+0x74>)
 80012c4:	f000 ff9c 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012c8:	bf00      	nop
 80012ca:	3720      	adds	r7, #32
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40012400 	.word	0x40012400
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a12      	ldr	r2, [pc, #72]	; (8001334 <HAL_TIM_Base_MspInit+0x58>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d10c      	bne.n	8001308 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 80012f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012f8:	6193      	str	r3, [r2, #24]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001306:	e010      	b.n	800132a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d10b      	bne.n	800132a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a08      	ldr	r2, [pc, #32]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <HAL_TIM_Base_MspInit+0x5c>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
}
 800132a:	bf00      	nop
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr
 8001334:	40012c00 	.word	0x40012c00
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a35      	ldr	r2, [pc, #212]	; (800142c <HAL_TIM_MspPostInit+0xf0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d119      	bne.n	8001390 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b34      	ldr	r3, [pc, #208]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a33      	ldr	r2, [pc, #204]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b31      	ldr	r3, [pc, #196]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	482a      	ldr	r0, [pc, #168]	; (8001434 <HAL_TIM_MspPostInit+0xf8>)
 800138a:	f000 ff39 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800138e:	e048      	b.n	8001422 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM2)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001398:	d143      	bne.n	8001422 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b25      	ldr	r3, [pc, #148]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 800139c:	699b      	ldr	r3, [r3, #24]
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6193      	str	r3, [r2, #24]
 80013a6:	4b22      	ldr	r3, [pc, #136]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 80013b8:	f043 0304 	orr.w	r3, r3, #4
 80013bc:	6193      	str	r3, [r2, #24]
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_TIM_MspPostInit+0xf4>)
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80013ca:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2302      	movs	r3, #2
 80013d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	4619      	mov	r1, r3
 80013de:	4816      	ldr	r0, [pc, #88]	; (8001438 <HAL_TIM_MspPostInit+0xfc>)
 80013e0:	f000 ff0e 	bl	8002200 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2302      	movs	r3, #2
 80013f0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4619      	mov	r1, r3
 80013f8:	480e      	ldr	r0, [pc, #56]	; (8001434 <HAL_TIM_MspPostInit+0xf8>)
 80013fa:	f000 ff01 	bl	8002200 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_TIM_MspPostInit+0x100>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
 8001414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001416:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
 800141c:	4a07      	ldr	r2, [pc, #28]	; (800143c <HAL_TIM_MspPostInit+0x100>)
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	6053      	str	r3, [r2, #4]
}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	; 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40012c00 	.word	0x40012c00
 8001430:	40021000 	.word	0x40021000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00
 800143c:	40010000 	.word	0x40010000

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001444:	e7fe      	b.n	8001444 <NMI_Handler+0x4>

08001446 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800144a:	e7fe      	b.n	800144a <HardFault_Handler+0x4>

0800144c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001450:	e7fe      	b.n	8001450 <MemManage_Handler+0x4>

08001452 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001456:	e7fe      	b.n	8001456 <BusFault_Handler+0x4>

08001458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800145c:	e7fe      	b.n	800145c <UsageFault_Handler+0x4>

0800145e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f8ab 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001498:	4a14      	ldr	r2, [pc, #80]	; (80014ec <_sbrk+0x5c>)
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <_sbrk+0x60>)
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a4:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <_sbrk+0x64>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <_sbrk+0x64>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	; (80014f8 <_sbrk+0x68>)
 80014b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d207      	bcs.n	80014d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c0:	f002 fc9e 	bl	8003e00 <__errno>
 80014c4:	4603      	mov	r3, r0
 80014c6:	220c      	movs	r2, #12
 80014c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ca:	f04f 33ff 	mov.w	r3, #4294967295
 80014ce:	e009      	b.n	80014e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d0:	4b08      	ldr	r3, [pc, #32]	; (80014f4 <_sbrk+0x64>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	4a05      	ldr	r2, [pc, #20]	; (80014f4 <_sbrk+0x64>)
 80014e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e2:	68fb      	ldr	r3, [r7, #12]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	2000c000 	.word	0x2000c000
 80014f0:	00000400 	.word	0x00000400
 80014f4:	20000238 	.word	0x20000238
 80014f8:	20000388 	.word	0x20000388

080014fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr

08001508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001508:	f7ff fff8 	bl	80014fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800150e:	490c      	ldr	r1, [pc, #48]	; (8001540 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001514:	e002      	b.n	800151c <LoopCopyDataInit>

08001516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151a:	3304      	adds	r3, #4

0800151c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800151c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001520:	d3f9      	bcc.n	8001516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001524:	4c09      	ldr	r4, [pc, #36]	; (800154c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001528:	e001      	b.n	800152e <LoopFillZerobss>

0800152a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800152c:	3204      	adds	r2, #4

0800152e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001530:	d3fb      	bcc.n	800152a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001532:	f002 fc6b 	bl	8003e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fb63 	bl	8000c00 <main>
  bx lr
 800153a:	4770      	bx	lr
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001544:	080047c4 	.word	0x080047c4
  ldr r2, =_sbss
 8001548:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800154c:	20000388 	.word	0x20000388

08001550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 fe17 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	200f      	movs	r0, #15
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fe46 	bl	8001200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fe21 	bl	80021e6 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 fdf7 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x1c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x20>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000008 	.word	0x20000008
 8001600:	2000023c 	.word	0x2000023c

08001604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_GetTick+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	2000023c 	.word	0x2000023c

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff fff0 	bl	8001604 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_Delay+0x44>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffe0 	bl	8001604 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000008 	.word	0x20000008

08001660 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e0ce      	b.n	8001820 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168c:	2b00      	cmp	r3, #0
 800168e:	d109      	bne.n	80016a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff fde0 	bl	8001264 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 fbd7 	bl	8001e58 <ADC_ConversionStop_Disable>
 80016aa:	4603      	mov	r3, r0
 80016ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80a9 	bne.w	800180e <HAL_ADC_Init+0x1ae>
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f040 80a5 	bne.w	800180e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016cc:	f023 0302 	bic.w	r3, r3, #2
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4951      	ldr	r1, [pc, #324]	; (8001828 <HAL_ADC_Init+0x1c8>)
 80016e2:	428b      	cmp	r3, r1
 80016e4:	d10a      	bne.n	80016fc <HAL_ADC_Init+0x9c>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80016ee:	d002      	beq.n	80016f6 <HAL_ADC_Init+0x96>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	e004      	b.n	8001700 <HAL_ADC_Init+0xa0>
 80016f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016fa:	e001      	b.n	8001700 <HAL_ADC_Init+0xa0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001700:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7b1b      	ldrb	r3, [r3, #12]
 8001706:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001708:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4313      	orrs	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001718:	d003      	beq.n	8001722 <HAL_ADC_Init+0xc2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d102      	bne.n	8001728 <HAL_ADC_Init+0xc8>
 8001722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001726:	e000      	b.n	800172a <HAL_ADC_Init+0xca>
 8001728:	2300      	movs	r3, #0
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7d1b      	ldrb	r3, [r3, #20]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d119      	bne.n	800176c <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7b1b      	ldrb	r3, [r3, #12]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d109      	bne.n	8001754 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	3b01      	subs	r3, #1
 8001746:	035a      	lsls	r2, r3, #13
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e00b      	b.n	800176c <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001758:	f043 0220 	orr.w	r2, r3, #32
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	430a      	orrs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	4b29      	ldr	r3, [pc, #164]	; (800182c <HAL_ADC_Init+0x1cc>)
 8001788:	4013      	ands	r3, r2
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	6812      	ldr	r2, [r2, #0]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	430b      	orrs	r3, r1
 8001792:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800179c:	d003      	beq.n	80017a6 <HAL_ADC_Init+0x146>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d104      	bne.n	80017b0 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	051b      	lsls	r3, r3, #20
 80017ae:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_ADC_Init+0x1d0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d10b      	bne.n	80017ec <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	f023 0303 	bic.w	r3, r3, #3
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017ea:	e018      	b.n	800181e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	f023 0312 	bic.w	r3, r3, #18
 80017f4:	f043 0210 	orr.w	r2, r3, #16
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001800:	f043 0201 	orr.w	r2, r3, #1
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800180c:	e007      	b.n	800181e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40013c00 	.word	0x40013c00
 800182c:	ffe1f7fd 	.word	0xffe1f7fd
 8001830:	ff1f0efe 	.word	0xff1f0efe

08001834 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_ADC_Start+0x1a>
 800184a:	2302      	movs	r3, #2
 800184c:	e098      	b.n	8001980 <HAL_ADC_Start+0x14c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 faa4 	bl	8001da4 <ADC_Enable>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8087 	bne.w	8001976 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a41      	ldr	r2, [pc, #260]	; (8001988 <HAL_ADC_Start+0x154>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d105      	bne.n	8001892 <HAL_ADC_Start+0x5e>
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <HAL_ADC_Start+0x158>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001896:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d026      	beq.n	80018fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018bc:	e01d      	b.n	80018fa <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a2f      	ldr	r2, [pc, #188]	; (800198c <HAL_ADC_Start+0x158>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d004      	beq.n	80018de <HAL_ADC_Start+0xaa>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <HAL_ADC_Start+0x154>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d10d      	bne.n	80018fa <HAL_ADC_Start+0xc6>
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <HAL_ADC_Start+0x158>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f023 0206 	bic.w	r2, r3, #6
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
 8001912:	e002      	b.n	800191a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f06f 0202 	mvn.w	r2, #2
 800192a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001936:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800193a:	d113      	bne.n	8001964 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001940:	4a11      	ldr	r2, [pc, #68]	; (8001988 <HAL_ADC_Start+0x154>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d105      	bne.n	8001952 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <HAL_ADC_Start+0x158>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800194e:	2b00      	cmp	r3, #0
 8001950:	d108      	bne.n	8001964 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	e00c      	b.n	800197e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e003      	b.n	800197e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800197e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40012800 	.word	0x40012800
 800198c:	40012400 	.word	0x40012400

08001990 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80019a6:	f7ff fe2d 	bl	8001604 <HAL_GetTick>
 80019aa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	f043 0220 	orr.w	r2, r3, #32
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0d3      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d131      	bne.n	8001a44 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d12a      	bne.n	8001a44 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80019ee:	e021      	b.n	8001a34 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d01d      	beq.n	8001a34 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d007      	beq.n	8001a0e <HAL_ADC_PollForConversion+0x7e>
 80019fe:	f7ff fe01 	bl	8001604 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d212      	bcs.n	8001a34 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10b      	bne.n	8001a34 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0a2      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0d6      	beq.n	80019f0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001a42:	e070      	b.n	8001b26 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a44:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_ADC_PollForConversion+0x1f4>)
 8001a46:	681c      	ldr	r4, [r3, #0]
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f001 fa37 	bl	8002ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6919      	ldr	r1, [r3, #16]
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <HAL_ADC_PollForConversion+0x1f8>)
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d118      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x104>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68d9      	ldr	r1, [r3, #12]
 8001a68:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_ADC_PollForConversion+0x1fc>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d111      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x104>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6919      	ldr	r1, [r3, #16]
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <HAL_ADC_PollForConversion+0x200>)
 8001a78:	400b      	ands	r3, r1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d108      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x100>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68d9      	ldr	r1, [r3, #12]
 8001a84:	4b43      	ldr	r3, [pc, #268]	; (8001b94 <HAL_ADC_PollForConversion+0x204>)
 8001a86:	400b      	ands	r3, r1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADC_PollForConversion+0x100>
 8001a8c:	2314      	movs	r3, #20
 8001a8e:	e020      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x142>
 8001a90:	2329      	movs	r3, #41	; 0x29
 8001a92:	e01e      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x142>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6919      	ldr	r1, [r3, #16]
 8001a9a:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <HAL_ADC_PollForConversion+0x200>)
 8001a9c:	400b      	ands	r3, r1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d106      	bne.n	8001ab0 <HAL_ADC_PollForConversion+0x120>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68d9      	ldr	r1, [r3, #12]
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_ADC_PollForConversion+0x204>)
 8001aaa:	400b      	ands	r3, r1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d00d      	beq.n	8001acc <HAL_ADC_PollForConversion+0x13c>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6919      	ldr	r1, [r3, #16]
 8001ab6:	4b38      	ldr	r3, [pc, #224]	; (8001b98 <HAL_ADC_PollForConversion+0x208>)
 8001ab8:	400b      	ands	r3, r1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x140>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68d9      	ldr	r1, [r3, #12]
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_ADC_PollForConversion+0x208>)
 8001ac6:	400b      	ands	r3, r1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_ADC_PollForConversion+0x140>
 8001acc:	2354      	movs	r3, #84	; 0x54
 8001ace:	e000      	b.n	8001ad2 <HAL_ADC_PollForConversion+0x142>
 8001ad0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001ad8:	e021      	b.n	8001b1e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae0:	d01a      	beq.n	8001b18 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x168>
 8001ae8:	f7ff fd8c 	bl	8001604 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d20f      	bcs.n	8001b18 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d90b      	bls.n	8001b18 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b04:	f043 0204 	orr.w	r2, r3, #4
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e030      	b.n	8001b7a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d8d9      	bhi.n	8001ada <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f06f 0212 	mvn.w	r2, #18
 8001b2e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b4a:	d115      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d111      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd90      	pop	{r4, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000000 	.word	0x20000000
 8001b88:	24924924 	.word	0x24924924
 8001b8c:	00924924 	.word	0x00924924
 8001b90:	12492492 	.word	0x12492492
 8001b94:	00492492 	.word	0x00492492
 8001b98:	00249249 	.word	0x00249249

08001b9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x20>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e0dc      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x1da>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b06      	cmp	r3, #6
 8001be2:	d81c      	bhi.n	8001c1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3b05      	subs	r3, #5
 8001bf6:	221f      	movs	r2, #31
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4019      	ands	r1, r3
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3b05      	subs	r3, #5
 8001c10:	fa00 f203 	lsl.w	r2, r0, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1c:	e03c      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d81c      	bhi.n	8001c60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	3b23      	subs	r3, #35	; 0x23
 8001c38:	221f      	movs	r2, #31
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	4019      	ands	r1, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	6818      	ldr	r0, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b23      	subs	r3, #35	; 0x23
 8001c52:	fa00 f203 	lsl.w	r2, r0, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001c5e:	e01b      	b.n	8001c98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b41      	subs	r3, #65	; 0x41
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	4019      	ands	r1, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6818      	ldr	r0, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b41      	subs	r3, #65	; 0x41
 8001c8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b09      	cmp	r3, #9
 8001c9e:	d91c      	bls.n	8001cda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68d9      	ldr	r1, [r3, #12]
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	4413      	add	r3, r2
 8001cb0:	3b1e      	subs	r3, #30
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	4019      	ands	r1, r3
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	6898      	ldr	r0, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	3b1e      	subs	r3, #30
 8001ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	e019      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	2207      	movs	r2, #7
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4019      	ands	r1, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6898      	ldr	r0, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	fa00 f203 	lsl.w	r2, r0, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b10      	cmp	r3, #16
 8001d14:	d003      	beq.n	8001d1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001d1a:	2b11      	cmp	r3, #17
 8001d1c:	d132      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a1d      	ldr	r2, [pc, #116]	; (8001d98 <HAL_ADC_ConfigChannel+0x1e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d125      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d126      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001d44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b10      	cmp	r3, #16
 8001d4c:	d11a      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_ADC_ConfigChannel+0x1e8>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9a      	lsrs	r2, r3, #18
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d64:	e002      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f9      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x1b2>
 8001d72:	e007      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d78:	f043 0220 	orr.w	r2, r3, #32
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	40012400 	.word	0x40012400
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	431bde83 	.word	0x431bde83

08001da4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d040      	beq.n	8001e44 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <ADC_Enable+0xac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1f      	ldr	r2, [pc, #124]	; (8001e54 <ADC_Enable+0xb0>)
 8001dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ddc:	0c9b      	lsrs	r3, r3, #18
 8001dde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001de0:	e002      	b.n	8001de8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f9      	bne.n	8001de2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001dee:	f7ff fc09 	bl	8001604 <HAL_GetTick>
 8001df2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001df4:	e01f      	b.n	8001e36 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001df6:	f7ff fc05 	bl	8001604 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d918      	bls.n	8001e36 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d011      	beq.n	8001e36 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	f043 0210 	orr.w	r2, r3, #16
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e007      	b.n	8001e46 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d1d8      	bne.n	8001df6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000000 	.word	0x20000000
 8001e54:	431bde83 	.word	0x431bde83

08001e58 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d12e      	bne.n	8001ed0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e82:	f7ff fbbf 	bl	8001604 <HAL_GetTick>
 8001e86:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001e88:	e01b      	b.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001e8a:	f7ff fbbb 	bl	8001604 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d914      	bls.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d10d      	bne.n	8001ec2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f043 0210 	orr.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb6:	f043 0201 	orr.w	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e007      	b.n	8001ed2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d0dc      	beq.n	8001e8a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_ADCEx_Calibration_Start+0x1e>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e097      	b.n	800202a <HAL_ADCEx_Calibration_Start+0x14e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa8 	bl	8001e58 <ADC_ConversionStop_Disable>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff49 	bl	8001da4 <ADC_Enable>
 8001f12:	4603      	mov	r3, r0
 8001f14:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f040 8081 	bne.w	8002020 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f26:	f023 0302 	bic.w	r3, r3, #2
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001f32:	4b40      	ldr	r3, [pc, #256]	; (8002034 <HAL_ADCEx_Calibration_Start+0x158>)
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	2002      	movs	r0, #2
 8001f38:	f000 ffc0 	bl	8002ebc <HAL_RCCEx_GetPeriphCLKFreq>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001f42:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001f44:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001f46:	e002      	b.n	8001f4e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f9      	bne.n	8001f48 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0208 	orr.w	r2, r2, #8
 8001f62:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001f64:	f7ff fb4e 	bl	8001604 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f6a:	e01b      	b.n	8001fa4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001f6c:	f7ff fb4a 	bl	8001604 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b0a      	cmp	r3, #10
 8001f78:	d914      	bls.n	8001fa4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00d      	beq.n	8001fa4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	f023 0312 	bic.w	r3, r3, #18
 8001f90:	f043 0210 	orr.w	r2, r3, #16
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e042      	b.n	800202a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1dc      	bne.n	8001f6c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f042 0204 	orr.w	r2, r2, #4
 8001fc0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001fc2:	f7ff fb1f 	bl	8001604 <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fc8:	e01b      	b.n	8002002 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001fca:	f7ff fb1b 	bl	8001604 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b0a      	cmp	r3, #10
 8001fd6:	d914      	bls.n	8002002 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	f023 0312 	bic.w	r3, r3, #18
 8001fee:	f043 0210 	orr.w	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e013      	b.n	800202a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1dc      	bne.n	8001fca <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	f023 0303 	bic.w	r3, r3, #3
 8002018:	f043 0201 	orr.w	r2, r3, #1
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002028:	7dfb      	ldrb	r3, [r7, #23]
}
 800202a:	4618      	mov	r0, r3
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	bd90      	pop	{r4, r7, pc}
 8002032:	bf00      	nop
 8002034:	20000000 	.word	0x20000000

08002038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002060:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800206a:	4a04      	ldr	r2, [pc, #16]	; (800207c <__NVIC_SetPriorityGrouping+0x44>)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	60d3      	str	r3, [r2, #12]
}
 8002070:	bf00      	nop
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <__NVIC_GetPriorityGrouping+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 0307 	and.w	r3, r3, #7
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	bc80      	pop	{r7}
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	6039      	str	r1, [r7, #0]
 80020a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0a      	blt.n	80020c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	490c      	ldr	r1, [pc, #48]	; (80020e8 <__NVIC_SetPriority+0x4c>)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	440b      	add	r3, r1
 80020c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c4:	e00a      	b.n	80020dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4908      	ldr	r1, [pc, #32]	; (80020ec <__NVIC_SetPriority+0x50>)
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3b04      	subs	r3, #4
 80020d4:	0112      	lsls	r2, r2, #4
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	440b      	add	r3, r1
 80020da:	761a      	strb	r2, [r3, #24]
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000e100 	.word	0xe000e100
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f1c3 0307 	rsb	r3, r3, #7
 800210a:	2b04      	cmp	r3, #4
 800210c:	bf28      	it	cs
 800210e:	2304      	movcs	r3, #4
 8002110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	3304      	adds	r3, #4
 8002116:	2b06      	cmp	r3, #6
 8002118:	d902      	bls.n	8002120 <NVIC_EncodePriority+0x30>
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3b03      	subs	r3, #3
 800211e:	e000      	b.n	8002122 <NVIC_EncodePriority+0x32>
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	f04f 32ff 	mov.w	r2, #4294967295
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43da      	mvns	r2, r3
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	401a      	ands	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	43d9      	mvns	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002148:	4313      	orrs	r3, r2
         );
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff90 	bl	800209c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff49 	bl	8002038 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff5e 	bl	8002080 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff90 	bl	80020f0 <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5f 	bl	800209c <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffb0 	bl	8002154 <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002200:	b480      	push	{r7}
 8002202:	b08b      	sub	sp, #44	; 0x2c
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002212:	e179      	b.n	8002508 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002214:	2201      	movs	r2, #1
 8002216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 8168 	bne.w	8002502 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4a96      	ldr	r2, [pc, #600]	; (8002490 <HAL_GPIO_Init+0x290>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d05e      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 800223c:	4a94      	ldr	r2, [pc, #592]	; (8002490 <HAL_GPIO_Init+0x290>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d875      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002242:	4a94      	ldr	r2, [pc, #592]	; (8002494 <HAL_GPIO_Init+0x294>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d058      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002248:	4a92      	ldr	r2, [pc, #584]	; (8002494 <HAL_GPIO_Init+0x294>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d86f      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800224e:	4a92      	ldr	r2, [pc, #584]	; (8002498 <HAL_GPIO_Init+0x298>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d052      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002254:	4a90      	ldr	r2, [pc, #576]	; (8002498 <HAL_GPIO_Init+0x298>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d869      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800225a:	4a90      	ldr	r2, [pc, #576]	; (800249c <HAL_GPIO_Init+0x29c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d04c      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 8002260:	4a8e      	ldr	r2, [pc, #568]	; (800249c <HAL_GPIO_Init+0x29c>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d863      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002266:	4a8e      	ldr	r2, [pc, #568]	; (80024a0 <HAL_GPIO_Init+0x2a0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d046      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
 800226c:	4a8c      	ldr	r2, [pc, #560]	; (80024a0 <HAL_GPIO_Init+0x2a0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d85d      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d82a      	bhi.n	80022cc <HAL_GPIO_Init+0xcc>
 8002276:	2b12      	cmp	r3, #18
 8002278:	d859      	bhi.n	800232e <HAL_GPIO_Init+0x12e>
 800227a:	a201      	add	r2, pc, #4	; (adr r2, 8002280 <HAL_GPIO_Init+0x80>)
 800227c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002280:	080022fb 	.word	0x080022fb
 8002284:	080022d5 	.word	0x080022d5
 8002288:	080022e7 	.word	0x080022e7
 800228c:	08002329 	.word	0x08002329
 8002290:	0800232f 	.word	0x0800232f
 8002294:	0800232f 	.word	0x0800232f
 8002298:	0800232f 	.word	0x0800232f
 800229c:	0800232f 	.word	0x0800232f
 80022a0:	0800232f 	.word	0x0800232f
 80022a4:	0800232f 	.word	0x0800232f
 80022a8:	0800232f 	.word	0x0800232f
 80022ac:	0800232f 	.word	0x0800232f
 80022b0:	0800232f 	.word	0x0800232f
 80022b4:	0800232f 	.word	0x0800232f
 80022b8:	0800232f 	.word	0x0800232f
 80022bc:	0800232f 	.word	0x0800232f
 80022c0:	0800232f 	.word	0x0800232f
 80022c4:	080022dd 	.word	0x080022dd
 80022c8:	080022f1 	.word	0x080022f1
 80022cc:	4a75      	ldr	r2, [pc, #468]	; (80024a4 <HAL_GPIO_Init+0x2a4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022d2:	e02c      	b.n	800232e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e029      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	3304      	adds	r3, #4
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	e024      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	3308      	adds	r3, #8
 80022ec:	623b      	str	r3, [r7, #32]
          break;
 80022ee:	e01f      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	330c      	adds	r3, #12
 80022f6:	623b      	str	r3, [r7, #32]
          break;
 80022f8:	e01a      	b.n	8002330 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002302:	2304      	movs	r3, #4
 8002304:	623b      	str	r3, [r7, #32]
          break;
 8002306:	e013      	b.n	8002330 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002310:	2308      	movs	r3, #8
 8002312:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	611a      	str	r2, [r3, #16]
          break;
 800231a:	e009      	b.n	8002330 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800231c:	2308      	movs	r3, #8
 800231e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	615a      	str	r2, [r3, #20]
          break;
 8002326:	e003      	b.n	8002330 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
          break;
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x130>
          break;
 800232e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2bff      	cmp	r3, #255	; 0xff
 8002334:	d801      	bhi.n	800233a <HAL_GPIO_Init+0x13a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	e001      	b.n	800233e <HAL_GPIO_Init+0x13e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d802      	bhi.n	800234c <HAL_GPIO_Init+0x14c>
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	e002      	b.n	8002352 <HAL_GPIO_Init+0x152>
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	3b08      	subs	r3, #8
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	210f      	movs	r1, #15
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	fa01 f303 	lsl.w	r3, r1, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	6a39      	ldr	r1, [r7, #32]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	431a      	orrs	r2, r3
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80c1 	beq.w	8002502 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002380:	4b49      	ldr	r3, [pc, #292]	; (80024a8 <HAL_GPIO_Init+0x2a8>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	4a48      	ldr	r2, [pc, #288]	; (80024a8 <HAL_GPIO_Init+0x2a8>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6193      	str	r3, [r2, #24]
 800238c:	4b46      	ldr	r3, [pc, #280]	; (80024a8 <HAL_GPIO_Init+0x2a8>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002398:	4a44      	ldr	r2, [pc, #272]	; (80024ac <HAL_GPIO_Init+0x2ac>)
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a3c      	ldr	r2, [pc, #240]	; (80024b0 <HAL_GPIO_Init+0x2b0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d01f      	beq.n	8002404 <HAL_GPIO_Init+0x204>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a3b      	ldr	r2, [pc, #236]	; (80024b4 <HAL_GPIO_Init+0x2b4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d019      	beq.n	8002400 <HAL_GPIO_Init+0x200>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_GPIO_Init+0x2b8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d013      	beq.n	80023fc <HAL_GPIO_Init+0x1fc>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a39      	ldr	r2, [pc, #228]	; (80024bc <HAL_GPIO_Init+0x2bc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d00d      	beq.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a38      	ldr	r2, [pc, #224]	; (80024c0 <HAL_GPIO_Init+0x2c0>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d007      	beq.n	80023f4 <HAL_GPIO_Init+0x1f4>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a37      	ldr	r2, [pc, #220]	; (80024c4 <HAL_GPIO_Init+0x2c4>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d101      	bne.n	80023f0 <HAL_GPIO_Init+0x1f0>
 80023ec:	2305      	movs	r3, #5
 80023ee:	e00a      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f0:	2306      	movs	r3, #6
 80023f2:	e008      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f4:	2304      	movs	r3, #4
 80023f6:	e006      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023f8:	2303      	movs	r3, #3
 80023fa:	e004      	b.n	8002406 <HAL_GPIO_Init+0x206>
 80023fc:	2302      	movs	r3, #2
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0x206>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_GPIO_Init+0x206>
 8002404:	2300      	movs	r3, #0
 8002406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002408:	f002 0203 	and.w	r2, r2, #3
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	4093      	lsls	r3, r2
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002416:	4925      	ldr	r1, [pc, #148]	; (80024ac <HAL_GPIO_Init+0x2ac>)
 8002418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	4924      	ldr	r1, [pc, #144]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	608b      	str	r3, [r1, #8]
 800243c:	e006      	b.n	800244c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	43db      	mvns	r3, r3
 8002446:	4920      	ldr	r1, [pc, #128]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002448:	4013      	ands	r3, r2
 800244a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	491a      	ldr	r1, [pc, #104]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	60cb      	str	r3, [r1, #12]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002470:	4013      	ands	r3, r2
 8002472:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d025      	beq.n	80024cc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	4910      	ldr	r1, [pc, #64]	; (80024c8 <HAL_GPIO_Init+0x2c8>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
 800248c:	e025      	b.n	80024da <HAL_GPIO_Init+0x2da>
 800248e:	bf00      	nop
 8002490:	10320000 	.word	0x10320000
 8002494:	10310000 	.word	0x10310000
 8002498:	10220000 	.word	0x10220000
 800249c:	10210000 	.word	0x10210000
 80024a0:	10120000 	.word	0x10120000
 80024a4:	10110000 	.word	0x10110000
 80024a8:	40021000 	.word	0x40021000
 80024ac:	40010000 	.word	0x40010000
 80024b0:	40010800 	.word	0x40010800
 80024b4:	40010c00 	.word	0x40010c00
 80024b8:	40011000 	.word	0x40011000
 80024bc:	40011400 	.word	0x40011400
 80024c0:	40011800 	.word	0x40011800
 80024c4:	40011c00 	.word	0x40011c00
 80024c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024cc:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4913      	ldr	r1, [pc, #76]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d006      	beq.n	80024f4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	490e      	ldr	r1, [pc, #56]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	4909      	ldr	r1, [pc, #36]	; (8002524 <HAL_GPIO_Init+0x324>)
 80024fe:	4013      	ands	r3, r2
 8002500:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	3301      	adds	r3, #1
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250e:	fa22 f303 	lsr.w	r3, r2, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	f47f ae7e 	bne.w	8002214 <HAL_GPIO_Init+0x14>
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	372c      	adds	r7, #44	; 0x2c
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	611a      	str	r2, [r3, #16]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e272      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00c      	beq.n	800259e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d112      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d06c      	beq.n	8002684 <HAL_RCC_OscConfig+0x12c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d168      	bne.n	8002684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e24c      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x76>
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e02e      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0xbc>
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe ffe6 	bl	8001604 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe ffe2 	bl	8001604 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e200      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0xe4>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7fe ffd2 	bl	8001604 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe ffce 	bl	8001604 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1ec      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x10c>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d063      	beq.n	800275a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1c0      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	e03a      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe ff87 	bl	8001604 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe ff83 	bl	8001604 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e1a1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe ff66 	bl	8001604 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7fe ff62 	bl	8001604 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e180      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03a      	beq.n	80027dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe ff46 	bl	8001604 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7fe ff42 	bl	8001604 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e160      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f000 faba 	bl	8002d14 <RCC_Delay>
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7fe ff2c 	bl	8001604 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7fe ff28 	bl	8001604 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d908      	bls.n	80027d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e146      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	42420000 	.word	0x42420000
 80027cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b92      	ldr	r3, [pc, #584]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e9      	bne.n	80027b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a6 	beq.w	8002936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b8b      	ldr	r3, [pc, #556]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b88      	ldr	r3, [pc, #544]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a87      	ldr	r2, [pc, #540]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b85      	ldr	r3, [pc, #532]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b82      	ldr	r3, [pc, #520]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b7f      	ldr	r3, [pc, #508]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a7e      	ldr	r2, [pc, #504]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7fe fee9 	bl	8001604 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7fe fee5 	bl	8001604 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e103      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b75      	ldr	r3, [pc, #468]	; (8002a20 <HAL_RCC_OscConfig+0x4c8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x312>
 800285c:	4b6f      	ldr	r3, [pc, #444]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e02d      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x334>
 8002872:	4b6a      	ldr	r3, [pc, #424]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a69      	ldr	r2, [pc, #420]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b67      	ldr	r3, [pc, #412]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a66      	ldr	r2, [pc, #408]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x356>
 8002894:	4b61      	ldr	r3, [pc, #388]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a60      	ldr	r2, [pc, #384]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a5d      	ldr	r2, [pc, #372]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a5a      	ldr	r2, [pc, #360]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b58      	ldr	r3, [pc, #352]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a57      	ldr	r2, [pc, #348]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fe99 	bl	8001604 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7fe fe95 	bl	8001604 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0b1      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b4b      	ldr	r3, [pc, #300]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x37e>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7fe fe83 	bl	8001604 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7fe fe7f 	bl	8001604 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e09b      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b40      	ldr	r3, [pc, #256]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b3c      	ldr	r3, [pc, #240]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a3b      	ldr	r2, [pc, #236]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8087 	beq.w	8002a4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b36      	ldr	r3, [pc, #216]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d061      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d146      	bne.n	80029e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7fe fe53 	bl	8001604 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7fe fe4f 	bl	8001604 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e06d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4921      	ldr	r1, [pc, #132]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299c:	4b1f      	ldr	r3, [pc, #124]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	430b      	orrs	r3, r1
 80029ae:	491b      	ldr	r1, [pc, #108]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fe23 	bl	8001604 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fe1f 	bl	8001604 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e03d      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46a>
 80029e0:	e035      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <HAL_RCC_OscConfig+0x4cc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7fe fe0c 	bl	8001604 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fe08 	bl	8001604 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e026      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x498>
 8002a0e:	e01e      	b.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e019      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40007000 	.word	0x40007000
 8002a24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a28:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <HAL_RCC_OscConfig+0x500>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d001      	beq.n	8002a4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0d0      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4965      	ldr	r1, [pc, #404]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b8      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d020      	beq.n	8002aee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d005      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab8:	4b59      	ldr	r3, [pc, #356]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ac2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad0:	4b53      	ldr	r3, [pc, #332]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ada:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002adc:	4b50      	ldr	r3, [pc, #320]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	494d      	ldr	r1, [pc, #308]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d040      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b02:	4b47      	ldr	r3, [pc, #284]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d115      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e07f      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b41      	ldr	r3, [pc, #260]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e073      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3d      	ldr	r3, [pc, #244]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06b      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4936      	ldr	r1, [pc, #216]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fd5a 	bl	8001604 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fd56 	bl	8001604 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e053      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2d      	ldr	r3, [pc, #180]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d210      	bcs.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b24      	ldr	r3, [pc, #144]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 0207 	bic.w	r2, r3, #7
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9a:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d001      	beq.n	8002bac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e032      	b.n	8002c12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d008      	beq.n	8002bca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb8:	4b19      	ldr	r3, [pc, #100]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4916      	ldr	r1, [pc, #88]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d009      	beq.n	8002bea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	490e      	ldr	r1, [pc, #56]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f000 f821 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	4b0b      	ldr	r3, [pc, #44]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	091b      	lsrs	r3, r3, #4
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	490a      	ldr	r1, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	5ccb      	ldrb	r3, [r1, r3]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a09      	ldr	r2, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1cc>)
 8002c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_RCC_ClockConfig+0x1d0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe fcb8 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40022000 	.word	0x40022000
 8002c20:	40021000 	.word	0x40021000
 8002c24:	08004748 	.word	0x08004748
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c4a:	4b1e      	ldr	r3, [pc, #120]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 030c 	and.w	r3, r3, #12
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d002      	beq.n	8002c60 <HAL_RCC_GetSysClockFreq+0x30>
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d003      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x36>
 8002c5e:	e027      	b.n	8002cb0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c62:	613b      	str	r3, [r7, #16]
      break;
 8002c64:	e027      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	0c9b      	lsrs	r3, r3, #18
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d010      	beq.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	0c5b      	lsrs	r3, r3, #17
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c92:	fb03 f202 	mul.w	r2, r3, r2
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	e004      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ca4:	fb02 f303 	mul.w	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	613b      	str	r3, [r7, #16]
      break;
 8002cae:	e002      	b.n	8002cb6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cb0:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cb2:	613b      	str	r3, [r7, #16]
      break;
 8002cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cb6:	693b      	ldr	r3, [r7, #16]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	371c      	adds	r7, #28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	007a1200 	.word	0x007a1200
 8002ccc:	08004760 	.word	0x08004760
 8002cd0:	08004770 	.word	0x08004770
 8002cd4:	003d0900 	.word	0x003d0900

08002cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b02      	ldr	r3, [pc, #8]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	20000000 	.word	0x20000000

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf0:	f7ff fff2 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4903      	ldr	r1, [pc, #12]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08004758 	.word	0x08004758

08002d14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <RCC_Delay+0x34>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <RCC_Delay+0x38>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	0a5b      	lsrs	r3, r3, #9
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d30:	bf00      	nop
  }
  while (Delay --);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1e5a      	subs	r2, r3, #1
 8002d36:	60fa      	str	r2, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d1f9      	bne.n	8002d30 <RCC_Delay+0x1c>
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20000000 	.word	0x20000000
 8002d4c:	10624dd3 	.word	0x10624dd3

08002d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d07d      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d70:	4b4f      	ldr	r3, [pc, #316]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10d      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d7c:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d86:	61d3      	str	r3, [r2, #28]
 8002d88:	4b49      	ldr	r3, [pc, #292]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d8a:	69db      	ldr	r3, [r3, #28]
 8002d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d98:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d118      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002da4:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a42      	ldr	r2, [pc, #264]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db0:	f7fe fc28 	bl	8001604 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db8:	f7fe fc24 	bl	8001604 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e06d      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dca:	4b3a      	ldr	r3, [pc, #232]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f0      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dd6:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d02e      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d027      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df4:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dfe:	4b2e      	ldr	r3, [pc, #184]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e04:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d014      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1a:	f7fe fbf3 	bl	8001604 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fbef 	bl	8001604 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e036      	b.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	4917      	ldr	r1, [pc, #92]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e74:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	490b      	ldr	r1, [pc, #44]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e92:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	4904      	ldr	r1, [pc, #16]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000
 8002eb8:	42420440 	.word	0x42420440

08002ebc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	2b0f      	cmp	r3, #15
 8002ede:	f200 80af 	bhi.w	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002fbf 	.word	0x08002fbf
 8002eec:	08003025 	.word	0x08003025
 8002ef0:	08003041 	.word	0x08003041
 8002ef4:	08002faf 	.word	0x08002faf
 8002ef8:	08003041 	.word	0x08003041
 8002efc:	08003041 	.word	0x08003041
 8002f00:	08003041 	.word	0x08003041
 8002f04:	08002fb7 	.word	0x08002fb7
 8002f08:	08003041 	.word	0x08003041
 8002f0c:	08003041 	.word	0x08003041
 8002f10:	08003041 	.word	0x08003041
 8002f14:	08003041 	.word	0x08003041
 8002f18:	08003041 	.word	0x08003041
 8002f1c:	08003041 	.word	0x08003041
 8002f20:	08003041 	.word	0x08003041
 8002f24:	08002f29 	.word	0x08002f29
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002f28:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f2e:	4b49      	ldr	r3, [pc, #292]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 8084 	beq.w	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	0c9b      	lsrs	r3, r3, #18
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	4a44      	ldr	r2, [pc, #272]	; (8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f54:	4b3f      	ldr	r3, [pc, #252]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0c5b      	lsrs	r3, r3, #17
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	4a3f      	ldr	r2, [pc, #252]	; (800305c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8002f60:	5cd3      	ldrb	r3, [r2, r3]
 8002f62:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f6e:	4a3c      	ldr	r2, [pc, #240]	; (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	fb02 f303 	mul.w	r3, r2, r3
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e004      	b.n	8002f8a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f96:	d102      	bne.n	8002f9e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002f9c:	e052      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4a31      	ldr	r2, [pc, #196]	; (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	61bb      	str	r3, [r7, #24]
      break;
 8002fac:	e04a      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002fae:	f7ff fe3f 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002fb2:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002fb4:	e049      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002fb6:	f7ff fe3b 	bl	8002c30 <HAL_RCC_GetSysClockFreq>
 8002fba:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002fbc:	e045      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fce:	d108      	bne.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8002fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e01f      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fec:	d109      	bne.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002fee:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8002ffa:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e00f      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800300c:	d11c      	bne.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800300e:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 800301a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800301e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003020:	e012      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8003022:	e011      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003024:	f7ff fe62 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0b9b      	lsrs	r3, r3, #14
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	3301      	adds	r3, #1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	61bb      	str	r3, [r7, #24]
      break;
 800303e:	e004      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8003048:	bf00      	nop
    }
  }
  return (frequency);
 800304a:	69bb      	ldr	r3, [r7, #24]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	08004774 	.word	0x08004774
 800305c:	08004784 	.word	0x08004784
 8003060:	007a1200 	.word	0x007a1200
 8003064:	003d0900 	.word	0x003d0900
 8003068:	aaaaaaab 	.word	0xaaaaaaab

0800306c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e041      	b.n	8003102 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d106      	bne.n	8003098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7fe f922 	bl	80012dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3304      	adds	r3, #4
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f000 faca 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e041      	b.n	80031a0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f839 	bl	80031a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 fa7b 	bl	8003644 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d109      	bne.n	80031e0 <HAL_TIM_PWM_Start+0x24>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	e022      	b.n	8003226 <HAL_TIM_PWM_Start+0x6a>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d109      	bne.n	80031fa <HAL_TIM_PWM_Start+0x3e>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	e015      	b.n	8003226 <HAL_TIM_PWM_Start+0x6a>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x58>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e008      	b.n	8003226 <HAL_TIM_PWM_Start+0x6a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e072      	b.n	8003314 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0x82>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	e013      	b.n	8003266 <HAL_TIM_PWM_Start+0xaa>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b04      	cmp	r3, #4
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Start+0x92>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800324c:	e00b      	b.n	8003266 <HAL_TIM_PWM_Start+0xaa>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Start+0xa2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800325c:	e003      	b.n	8003266 <HAL_TIM_PWM_Start+0xaa>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fca4 	bl	8003bbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a28      	ldr	r2, [pc, #160]	; (800331c <HAL_TIM_PWM_Start+0x160>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d004      	beq.n	8003288 <HAL_TIM_PWM_Start+0xcc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a27      	ldr	r2, [pc, #156]	; (8003320 <HAL_TIM_PWM_Start+0x164>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <HAL_TIM_PWM_Start+0xd0>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_TIM_PWM_Start+0xd2>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d007      	beq.n	80032a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_TIM_PWM_Start+0x160>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_TIM_PWM_Start+0x122>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1b      	ldr	r2, [pc, #108]	; (8003320 <HAL_TIM_PWM_Start+0x164>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_TIM_PWM_Start+0x122>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d00e      	beq.n	80032de <HAL_TIM_PWM_Start+0x122>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a17      	ldr	r2, [pc, #92]	; (8003324 <HAL_TIM_PWM_Start+0x168>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_TIM_PWM_Start+0x122>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_TIM_PWM_Start+0x16c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_TIM_PWM_Start+0x122>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_TIM_PWM_Start+0x170>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d111      	bne.n	8003302 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b06      	cmp	r3, #6
 80032ee:	d010      	beq.n	8003312 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	e007      	b.n	8003312 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40013400 	.word	0x40013400
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00

08003330 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800334a:	2302      	movs	r3, #2
 800334c:	e0ae      	b.n	80034ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	f200 809f 	bhi.w	800349c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800335e:	a201      	add	r2, pc, #4	; (adr r2, 8003364 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003399 	.word	0x08003399
 8003368:	0800349d 	.word	0x0800349d
 800336c:	0800349d 	.word	0x0800349d
 8003370:	0800349d 	.word	0x0800349d
 8003374:	080033d9 	.word	0x080033d9
 8003378:	0800349d 	.word	0x0800349d
 800337c:	0800349d 	.word	0x0800349d
 8003380:	0800349d 	.word	0x0800349d
 8003384:	0800341b 	.word	0x0800341b
 8003388:	0800349d 	.word	0x0800349d
 800338c:	0800349d 	.word	0x0800349d
 8003390:	0800349d 	.word	0x0800349d
 8003394:	0800345b 	.word	0x0800345b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 f9ca 	bl	8003738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0208 	orr.w	r2, r2, #8
 80033b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699a      	ldr	r2, [r3, #24]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0204 	bic.w	r2, r2, #4
 80033c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6999      	ldr	r1, [r3, #24]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	691a      	ldr	r2, [r3, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	619a      	str	r2, [r3, #24]
      break;
 80033d6:	e064      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa1a 	bl	8003818 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	021a      	lsls	r2, r3, #8
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	619a      	str	r2, [r3, #24]
      break;
 8003418:	e043      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fa6d 	bl	8003900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f042 0208 	orr.w	r2, r2, #8
 8003434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	69da      	ldr	r2, [r3, #28]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69d9      	ldr	r1, [r3, #28]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	61da      	str	r2, [r3, #28]
      break;
 8003458:	e023      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fac1 	bl	80039e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	61da      	str	r2, [r3, #28]
      break;
 800349a:	e002      	b.n	80034a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	75fb      	strb	r3, [r7, #23]
      break;
 80034a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIM_ConfigClockSource+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0b4      	b.n	800363a <HAL_TIM_ConfigClockSource+0x186>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003508:	d03e      	beq.n	8003588 <HAL_TIM_ConfigClockSource+0xd4>
 800350a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800350e:	f200 8087 	bhi.w	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003512:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003516:	f000 8086 	beq.w	8003626 <HAL_TIM_ConfigClockSource+0x172>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800351e:	d87f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b70      	cmp	r3, #112	; 0x70
 8003522:	d01a      	beq.n	800355a <HAL_TIM_ConfigClockSource+0xa6>
 8003524:	2b70      	cmp	r3, #112	; 0x70
 8003526:	d87b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b60      	cmp	r3, #96	; 0x60
 800352a:	d050      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x11a>
 800352c:	2b60      	cmp	r3, #96	; 0x60
 800352e:	d877      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b50      	cmp	r3, #80	; 0x50
 8003532:	d03c      	beq.n	80035ae <HAL_TIM_ConfigClockSource+0xfa>
 8003534:	2b50      	cmp	r3, #80	; 0x50
 8003536:	d873      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b40      	cmp	r3, #64	; 0x40
 800353a:	d058      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x13a>
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d86f      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b30      	cmp	r3, #48	; 0x30
 8003542:	d064      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b30      	cmp	r3, #48	; 0x30
 8003546:	d86b      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d060      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b20      	cmp	r3, #32
 800354e:	d867      	bhi.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b00      	cmp	r3, #0
 8003552:	d05c      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b10      	cmp	r3, #16
 8003556:	d05a      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x15a>
 8003558:	e062      	b.n	8003620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800356a:	f000 fb08 	bl	8003b7e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800357c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	609a      	str	r2, [r3, #8]
      break;
 8003586:	e04f      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003598:	f000 faf1 	bl	8003b7e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035aa:	609a      	str	r2, [r3, #8]
      break;
 80035ac:	e03c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ba:	461a      	mov	r2, r3
 80035bc:	f000 fa68 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2150      	movs	r1, #80	; 0x50
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 fabf 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 80035cc:	e02c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa86 	bl	8003aec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2160      	movs	r1, #96	; 0x60
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 faaf 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 80035ec:	e01c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fa48 	bl	8003a90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2140      	movs	r1, #64	; 0x40
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa9f 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 800360c:	e00c      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4619      	mov	r1, r3
 8003618:	4610      	mov	r0, r2
 800361a:	f000 fa96 	bl	8003b4a <TIM_ITRx_SetConfig>
      break;
 800361e:	e003      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
      break;
 8003624:	e000      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a33      	ldr	r2, [pc, #204]	; (8003724 <TIM_Base_SetConfig+0xe0>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d013      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a32      	ldr	r2, [pc, #200]	; (8003728 <TIM_Base_SetConfig+0xe4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00f      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d00b      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2f      	ldr	r2, [pc, #188]	; (800372c <TIM_Base_SetConfig+0xe8>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d007      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <TIM_Base_SetConfig+0xec>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d003      	beq.n	8003684 <TIM_Base_SetConfig+0x40>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <TIM_Base_SetConfig+0xf0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d108      	bne.n	8003696 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a22      	ldr	r2, [pc, #136]	; (8003724 <TIM_Base_SetConfig+0xe0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <TIM_Base_SetConfig+0x82>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a21      	ldr	r2, [pc, #132]	; (8003728 <TIM_Base_SetConfig+0xe4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00f      	beq.n	80036c6 <TIM_Base_SetConfig+0x82>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ac:	d00b      	beq.n	80036c6 <TIM_Base_SetConfig+0x82>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	; (800372c <TIM_Base_SetConfig+0xe8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_Base_SetConfig+0x82>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <TIM_Base_SetConfig+0xec>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_Base_SetConfig+0x82>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <TIM_Base_SetConfig+0xf0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d108      	bne.n	80036d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a09      	ldr	r2, [pc, #36]	; (8003724 <TIM_Base_SetConfig+0xe0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0xc8>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <TIM_Base_SetConfig+0xe4>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	615a      	str	r2, [r3, #20]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	bc80      	pop	{r7}
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40013400 	.word	0x40013400
 800372c:	40000400 	.word	0x40000400
 8003730:	40000800 	.word	0x40000800
 8003734:	40000c00 	.word	0x40000c00

08003738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0201 	bic.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0302 	bic.w	r3, r3, #2
 8003780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a20      	ldr	r2, [pc, #128]	; (8003810 <TIM_OC1_SetConfig+0xd8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_OC1_SetConfig+0x64>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <TIM_OC1_SetConfig+0xdc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d10c      	bne.n	80037b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f023 0308 	bic.w	r3, r3, #8
 80037a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a15      	ldr	r2, [pc, #84]	; (8003810 <TIM_OC1_SetConfig+0xd8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_OC1_SetConfig+0x8e>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a14      	ldr	r2, [pc, #80]	; (8003814 <TIM_OC1_SetConfig+0xdc>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d111      	bne.n	80037ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40013400 	.word	0x40013400

08003818 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f023 0210 	bic.w	r2, r3, #16
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	021b      	lsls	r3, r3, #8
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	4313      	orrs	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f023 0320 	bic.w	r3, r3, #32
 8003862:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a21      	ldr	r2, [pc, #132]	; (80038f8 <TIM_OC2_SetConfig+0xe0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d003      	beq.n	8003880 <TIM_OC2_SetConfig+0x68>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a20      	ldr	r2, [pc, #128]	; (80038fc <TIM_OC2_SetConfig+0xe4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10d      	bne.n	800389c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	4313      	orrs	r3, r2
 8003892:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800389a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a16      	ldr	r2, [pc, #88]	; (80038f8 <TIM_OC2_SetConfig+0xe0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d003      	beq.n	80038ac <TIM_OC2_SetConfig+0x94>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a15      	ldr	r2, [pc, #84]	; (80038fc <TIM_OC2_SetConfig+0xe4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d113      	bne.n	80038d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40013400 	.word	0x40013400

08003900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0303 	bic.w	r3, r3, #3
 8003936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	021b      	lsls	r3, r3, #8
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a21      	ldr	r2, [pc, #132]	; (80039e0 <TIM_OC3_SetConfig+0xe0>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d003      	beq.n	8003966 <TIM_OC3_SetConfig+0x66>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a20      	ldr	r2, [pc, #128]	; (80039e4 <TIM_OC3_SetConfig+0xe4>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d10d      	bne.n	8003982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800396c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <TIM_OC3_SetConfig+0xe0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d003      	beq.n	8003992 <TIM_OC3_SetConfig+0x92>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a15      	ldr	r2, [pc, #84]	; (80039e4 <TIM_OC3_SetConfig+0xe4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d113      	bne.n	80039ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	621a      	str	r2, [r3, #32]
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40013400 	.word	0x40013400

080039e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	021b      	lsls	r3, r3, #8
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	031b      	lsls	r3, r3, #12
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <TIM_OC4_SetConfig+0xa0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_OC4_SetConfig+0x68>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <TIM_OC4_SetConfig+0xa4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d109      	bne.n	8003a64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	019b      	lsls	r3, r3, #6
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	621a      	str	r2, [r3, #32]
}
 8003a7e:	bf00      	nop
 8003a80:	371c      	adds	r7, #28
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400

08003a90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0201 	bic.w	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f023 030a 	bic.w	r3, r3, #10
 8003acc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	621a      	str	r2, [r3, #32]
}
 8003ae2:	bf00      	nop
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr

08003aec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f023 0210 	bic.w	r2, r3, #16
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	031b      	lsls	r3, r3, #12
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b28:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	621a      	str	r2, [r3, #32]
}
 8003b40:	bf00      	nop
 8003b42:	371c      	adds	r7, #28
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr

08003b4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	b085      	sub	sp, #20
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f043 0307 	orr.w	r3, r3, #7
 8003b6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	021a      	lsls	r2, r3, #8
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	609a      	str	r2, [r3, #8]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 031f 	and.w	r3, r3, #31
 8003bce:	2201      	movs	r2, #1
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	401a      	ands	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d101      	bne.n	8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	e050      	b.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d018      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a19      	ldr	r2, [pc, #100]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a12      	ldr	r2, [pc, #72]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10c      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr
 8003cc8:	40012c00 	.word	0x40012c00
 8003ccc:	40013400 	.word	0x40013400
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800
 8003cd8:	40000c00 	.word	0x40000c00

08003cdc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e03d      	b.n	8003d74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr

08003d7e <_vsniprintf_r>:
 8003d7e:	b530      	push	{r4, r5, lr}
 8003d80:	4614      	mov	r4, r2
 8003d82:	2c00      	cmp	r4, #0
 8003d84:	4605      	mov	r5, r0
 8003d86:	461a      	mov	r2, r3
 8003d88:	b09b      	sub	sp, #108	; 0x6c
 8003d8a:	da05      	bge.n	8003d98 <_vsniprintf_r+0x1a>
 8003d8c:	238b      	movs	r3, #139	; 0x8b
 8003d8e:	6003      	str	r3, [r0, #0]
 8003d90:	f04f 30ff 	mov.w	r0, #4294967295
 8003d94:	b01b      	add	sp, #108	; 0x6c
 8003d96:	bd30      	pop	{r4, r5, pc}
 8003d98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003d9c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003da0:	bf0c      	ite	eq
 8003da2:	4623      	moveq	r3, r4
 8003da4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003da8:	9302      	str	r3, [sp, #8]
 8003daa:	9305      	str	r3, [sp, #20]
 8003dac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db0:	9100      	str	r1, [sp, #0]
 8003db2:	9104      	str	r1, [sp, #16]
 8003db4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003db8:	4669      	mov	r1, sp
 8003dba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003dbc:	f000 f99a 	bl	80040f4 <_svfiprintf_r>
 8003dc0:	1c43      	adds	r3, r0, #1
 8003dc2:	bfbc      	itt	lt
 8003dc4:	238b      	movlt	r3, #139	; 0x8b
 8003dc6:	602b      	strlt	r3, [r5, #0]
 8003dc8:	2c00      	cmp	r4, #0
 8003dca:	d0e3      	beq.n	8003d94 <_vsniprintf_r+0x16>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	9b00      	ldr	r3, [sp, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	e7df      	b.n	8003d94 <_vsniprintf_r+0x16>

08003dd4 <vsniprintf>:
 8003dd4:	b507      	push	{r0, r1, r2, lr}
 8003dd6:	9300      	str	r3, [sp, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	460a      	mov	r2, r1
 8003ddc:	4601      	mov	r1, r0
 8003dde:	4803      	ldr	r0, [pc, #12]	; (8003dec <vsniprintf+0x18>)
 8003de0:	6800      	ldr	r0, [r0, #0]
 8003de2:	f7ff ffcc 	bl	8003d7e <_vsniprintf_r>
 8003de6:	b003      	add	sp, #12
 8003de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dec:	20000058 	.word	0x20000058

08003df0 <memset>:
 8003df0:	4603      	mov	r3, r0
 8003df2:	4402      	add	r2, r0
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d100      	bne.n	8003dfa <memset+0xa>
 8003df8:	4770      	bx	lr
 8003dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8003dfe:	e7f9      	b.n	8003df4 <memset+0x4>

08003e00 <__errno>:
 8003e00:	4b01      	ldr	r3, [pc, #4]	; (8003e08 <__errno+0x8>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000058 	.word	0x20000058

08003e0c <__libc_init_array>:
 8003e0c:	b570      	push	{r4, r5, r6, lr}
 8003e0e:	2600      	movs	r6, #0
 8003e10:	4d0c      	ldr	r5, [pc, #48]	; (8003e44 <__libc_init_array+0x38>)
 8003e12:	4c0d      	ldr	r4, [pc, #52]	; (8003e48 <__libc_init_array+0x3c>)
 8003e14:	1b64      	subs	r4, r4, r5
 8003e16:	10a4      	asrs	r4, r4, #2
 8003e18:	42a6      	cmp	r6, r4
 8003e1a:	d109      	bne.n	8003e30 <__libc_init_array+0x24>
 8003e1c:	f000 fc7a 	bl	8004714 <_init>
 8003e20:	2600      	movs	r6, #0
 8003e22:	4d0a      	ldr	r5, [pc, #40]	; (8003e4c <__libc_init_array+0x40>)
 8003e24:	4c0a      	ldr	r4, [pc, #40]	; (8003e50 <__libc_init_array+0x44>)
 8003e26:	1b64      	subs	r4, r4, r5
 8003e28:	10a4      	asrs	r4, r4, #2
 8003e2a:	42a6      	cmp	r6, r4
 8003e2c:	d105      	bne.n	8003e3a <__libc_init_array+0x2e>
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e34:	4798      	blx	r3
 8003e36:	3601      	adds	r6, #1
 8003e38:	e7ee      	b.n	8003e18 <__libc_init_array+0xc>
 8003e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e3e:	4798      	blx	r3
 8003e40:	3601      	adds	r6, #1
 8003e42:	e7f2      	b.n	8003e2a <__libc_init_array+0x1e>
 8003e44:	080047bc 	.word	0x080047bc
 8003e48:	080047bc 	.word	0x080047bc
 8003e4c:	080047bc 	.word	0x080047bc
 8003e50:	080047c0 	.word	0x080047c0

08003e54 <__retarget_lock_acquire_recursive>:
 8003e54:	4770      	bx	lr

08003e56 <__retarget_lock_release_recursive>:
 8003e56:	4770      	bx	lr

08003e58 <_free_r>:
 8003e58:	b538      	push	{r3, r4, r5, lr}
 8003e5a:	4605      	mov	r5, r0
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d040      	beq.n	8003ee2 <_free_r+0x8a>
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f0c      	subs	r4, r1, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfb8      	it	lt
 8003e6a:	18e4      	addlt	r4, r4, r3
 8003e6c:	f000 f8dc 	bl	8004028 <__malloc_lock>
 8003e70:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <_free_r+0x8c>)
 8003e72:	6813      	ldr	r3, [r2, #0]
 8003e74:	b933      	cbnz	r3, 8003e84 <_free_r+0x2c>
 8003e76:	6063      	str	r3, [r4, #4]
 8003e78:	6014      	str	r4, [r2, #0]
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e80:	f000 b8d8 	b.w	8004034 <__malloc_unlock>
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	d908      	bls.n	8003e9a <_free_r+0x42>
 8003e88:	6820      	ldr	r0, [r4, #0]
 8003e8a:	1821      	adds	r1, r4, r0
 8003e8c:	428b      	cmp	r3, r1
 8003e8e:	bf01      	itttt	eq
 8003e90:	6819      	ldreq	r1, [r3, #0]
 8003e92:	685b      	ldreq	r3, [r3, #4]
 8003e94:	1809      	addeq	r1, r1, r0
 8003e96:	6021      	streq	r1, [r4, #0]
 8003e98:	e7ed      	b.n	8003e76 <_free_r+0x1e>
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	b10b      	cbz	r3, 8003ea4 <_free_r+0x4c>
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d9fa      	bls.n	8003e9a <_free_r+0x42>
 8003ea4:	6811      	ldr	r1, [r2, #0]
 8003ea6:	1850      	adds	r0, r2, r1
 8003ea8:	42a0      	cmp	r0, r4
 8003eaa:	d10b      	bne.n	8003ec4 <_free_r+0x6c>
 8003eac:	6820      	ldr	r0, [r4, #0]
 8003eae:	4401      	add	r1, r0
 8003eb0:	1850      	adds	r0, r2, r1
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	6011      	str	r1, [r2, #0]
 8003eb6:	d1e0      	bne.n	8003e7a <_free_r+0x22>
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4408      	add	r0, r1
 8003ebe:	6010      	str	r0, [r2, #0]
 8003ec0:	6053      	str	r3, [r2, #4]
 8003ec2:	e7da      	b.n	8003e7a <_free_r+0x22>
 8003ec4:	d902      	bls.n	8003ecc <_free_r+0x74>
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	602b      	str	r3, [r5, #0]
 8003eca:	e7d6      	b.n	8003e7a <_free_r+0x22>
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	1821      	adds	r1, r4, r0
 8003ed0:	428b      	cmp	r3, r1
 8003ed2:	bf01      	itttt	eq
 8003ed4:	6819      	ldreq	r1, [r3, #0]
 8003ed6:	685b      	ldreq	r3, [r3, #4]
 8003ed8:	1809      	addeq	r1, r1, r0
 8003eda:	6021      	streq	r1, [r4, #0]
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6054      	str	r4, [r2, #4]
 8003ee0:	e7cb      	b.n	8003e7a <_free_r+0x22>
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000380 	.word	0x20000380

08003ee8 <sbrk_aligned>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	4e0e      	ldr	r6, [pc, #56]	; (8003f24 <sbrk_aligned+0x3c>)
 8003eec:	460c      	mov	r4, r1
 8003eee:	6831      	ldr	r1, [r6, #0]
 8003ef0:	4605      	mov	r5, r0
 8003ef2:	b911      	cbnz	r1, 8003efa <sbrk_aligned+0x12>
 8003ef4:	f000 fbaa 	bl	800464c <_sbrk_r>
 8003ef8:	6030      	str	r0, [r6, #0]
 8003efa:	4621      	mov	r1, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fba5 	bl	800464c <_sbrk_r>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d00a      	beq.n	8003f1c <sbrk_aligned+0x34>
 8003f06:	1cc4      	adds	r4, r0, #3
 8003f08:	f024 0403 	bic.w	r4, r4, #3
 8003f0c:	42a0      	cmp	r0, r4
 8003f0e:	d007      	beq.n	8003f20 <sbrk_aligned+0x38>
 8003f10:	1a21      	subs	r1, r4, r0
 8003f12:	4628      	mov	r0, r5
 8003f14:	f000 fb9a 	bl	800464c <_sbrk_r>
 8003f18:	3001      	adds	r0, #1
 8003f1a:	d101      	bne.n	8003f20 <sbrk_aligned+0x38>
 8003f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8003f20:	4620      	mov	r0, r4
 8003f22:	bd70      	pop	{r4, r5, r6, pc}
 8003f24:	20000384 	.word	0x20000384

08003f28 <_malloc_r>:
 8003f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f2c:	1ccd      	adds	r5, r1, #3
 8003f2e:	f025 0503 	bic.w	r5, r5, #3
 8003f32:	3508      	adds	r5, #8
 8003f34:	2d0c      	cmp	r5, #12
 8003f36:	bf38      	it	cc
 8003f38:	250c      	movcc	r5, #12
 8003f3a:	2d00      	cmp	r5, #0
 8003f3c:	4607      	mov	r7, r0
 8003f3e:	db01      	blt.n	8003f44 <_malloc_r+0x1c>
 8003f40:	42a9      	cmp	r1, r5
 8003f42:	d905      	bls.n	8003f50 <_malloc_r+0x28>
 8003f44:	230c      	movs	r3, #12
 8003f46:	2600      	movs	r6, #0
 8003f48:	603b      	str	r3, [r7, #0]
 8003f4a:	4630      	mov	r0, r6
 8003f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004024 <_malloc_r+0xfc>
 8003f54:	f000 f868 	bl	8004028 <__malloc_lock>
 8003f58:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5c:	461c      	mov	r4, r3
 8003f5e:	bb5c      	cbnz	r4, 8003fb8 <_malloc_r+0x90>
 8003f60:	4629      	mov	r1, r5
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff ffc0 	bl	8003ee8 <sbrk_aligned>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	d155      	bne.n	800401a <_malloc_r+0xf2>
 8003f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8003f72:	4626      	mov	r6, r4
 8003f74:	2e00      	cmp	r6, #0
 8003f76:	d145      	bne.n	8004004 <_malloc_r+0xdc>
 8003f78:	2c00      	cmp	r4, #0
 8003f7a:	d048      	beq.n	800400e <_malloc_r+0xe6>
 8003f7c:	6823      	ldr	r3, [r4, #0]
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4638      	mov	r0, r7
 8003f82:	eb04 0903 	add.w	r9, r4, r3
 8003f86:	f000 fb61 	bl	800464c <_sbrk_r>
 8003f8a:	4581      	cmp	r9, r0
 8003f8c:	d13f      	bne.n	800400e <_malloc_r+0xe6>
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	4638      	mov	r0, r7
 8003f92:	1a6d      	subs	r5, r5, r1
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7ff ffa7 	bl	8003ee8 <sbrk_aligned>
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	d037      	beq.n	800400e <_malloc_r+0xe6>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	442b      	add	r3, r5
 8003fa2:	6023      	str	r3, [r4, #0]
 8003fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d038      	beq.n	800401e <_malloc_r+0xf6>
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	42a2      	cmp	r2, r4
 8003fb0:	d12b      	bne.n	800400a <_malloc_r+0xe2>
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	e00f      	b.n	8003fd8 <_malloc_r+0xb0>
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	1b52      	subs	r2, r2, r5
 8003fbc:	d41f      	bmi.n	8003ffe <_malloc_r+0xd6>
 8003fbe:	2a0b      	cmp	r2, #11
 8003fc0:	d917      	bls.n	8003ff2 <_malloc_r+0xca>
 8003fc2:	1961      	adds	r1, r4, r5
 8003fc4:	42a3      	cmp	r3, r4
 8003fc6:	6025      	str	r5, [r4, #0]
 8003fc8:	bf18      	it	ne
 8003fca:	6059      	strne	r1, [r3, #4]
 8003fcc:	6863      	ldr	r3, [r4, #4]
 8003fce:	bf08      	it	eq
 8003fd0:	f8c8 1000 	streq.w	r1, [r8]
 8003fd4:	5162      	str	r2, [r4, r5]
 8003fd6:	604b      	str	r3, [r1, #4]
 8003fd8:	4638      	mov	r0, r7
 8003fda:	f104 060b 	add.w	r6, r4, #11
 8003fde:	f000 f829 	bl	8004034 <__malloc_unlock>
 8003fe2:	f026 0607 	bic.w	r6, r6, #7
 8003fe6:	1d23      	adds	r3, r4, #4
 8003fe8:	1af2      	subs	r2, r6, r3
 8003fea:	d0ae      	beq.n	8003f4a <_malloc_r+0x22>
 8003fec:	1b9b      	subs	r3, r3, r6
 8003fee:	50a3      	str	r3, [r4, r2]
 8003ff0:	e7ab      	b.n	8003f4a <_malloc_r+0x22>
 8003ff2:	42a3      	cmp	r3, r4
 8003ff4:	6862      	ldr	r2, [r4, #4]
 8003ff6:	d1dd      	bne.n	8003fb4 <_malloc_r+0x8c>
 8003ff8:	f8c8 2000 	str.w	r2, [r8]
 8003ffc:	e7ec      	b.n	8003fd8 <_malloc_r+0xb0>
 8003ffe:	4623      	mov	r3, r4
 8004000:	6864      	ldr	r4, [r4, #4]
 8004002:	e7ac      	b.n	8003f5e <_malloc_r+0x36>
 8004004:	4634      	mov	r4, r6
 8004006:	6876      	ldr	r6, [r6, #4]
 8004008:	e7b4      	b.n	8003f74 <_malloc_r+0x4c>
 800400a:	4613      	mov	r3, r2
 800400c:	e7cc      	b.n	8003fa8 <_malloc_r+0x80>
 800400e:	230c      	movs	r3, #12
 8004010:	4638      	mov	r0, r7
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	f000 f80e 	bl	8004034 <__malloc_unlock>
 8004018:	e797      	b.n	8003f4a <_malloc_r+0x22>
 800401a:	6025      	str	r5, [r4, #0]
 800401c:	e7dc      	b.n	8003fd8 <_malloc_r+0xb0>
 800401e:	605b      	str	r3, [r3, #4]
 8004020:	deff      	udf	#255	; 0xff
 8004022:	bf00      	nop
 8004024:	20000380 	.word	0x20000380

08004028 <__malloc_lock>:
 8004028:	4801      	ldr	r0, [pc, #4]	; (8004030 <__malloc_lock+0x8>)
 800402a:	f7ff bf13 	b.w	8003e54 <__retarget_lock_acquire_recursive>
 800402e:	bf00      	nop
 8004030:	2000037c 	.word	0x2000037c

08004034 <__malloc_unlock>:
 8004034:	4801      	ldr	r0, [pc, #4]	; (800403c <__malloc_unlock+0x8>)
 8004036:	f7ff bf0e 	b.w	8003e56 <__retarget_lock_release_recursive>
 800403a:	bf00      	nop
 800403c:	2000037c 	.word	0x2000037c

08004040 <__ssputs_r>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	461f      	mov	r7, r3
 8004046:	688e      	ldr	r6, [r1, #8]
 8004048:	4682      	mov	sl, r0
 800404a:	42be      	cmp	r6, r7
 800404c:	460c      	mov	r4, r1
 800404e:	4690      	mov	r8, r2
 8004050:	680b      	ldr	r3, [r1, #0]
 8004052:	d82c      	bhi.n	80040ae <__ssputs_r+0x6e>
 8004054:	898a      	ldrh	r2, [r1, #12]
 8004056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800405a:	d026      	beq.n	80040aa <__ssputs_r+0x6a>
 800405c:	6965      	ldr	r5, [r4, #20]
 800405e:	6909      	ldr	r1, [r1, #16]
 8004060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004064:	eba3 0901 	sub.w	r9, r3, r1
 8004068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800406c:	1c7b      	adds	r3, r7, #1
 800406e:	444b      	add	r3, r9
 8004070:	106d      	asrs	r5, r5, #1
 8004072:	429d      	cmp	r5, r3
 8004074:	bf38      	it	cc
 8004076:	461d      	movcc	r5, r3
 8004078:	0553      	lsls	r3, r2, #21
 800407a:	d527      	bpl.n	80040cc <__ssputs_r+0x8c>
 800407c:	4629      	mov	r1, r5
 800407e:	f7ff ff53 	bl	8003f28 <_malloc_r>
 8004082:	4606      	mov	r6, r0
 8004084:	b360      	cbz	r0, 80040e0 <__ssputs_r+0xa0>
 8004086:	464a      	mov	r2, r9
 8004088:	6921      	ldr	r1, [r4, #16]
 800408a:	f000 fafd 	bl	8004688 <memcpy>
 800408e:	89a3      	ldrh	r3, [r4, #12]
 8004090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	6126      	str	r6, [r4, #16]
 800409c:	444e      	add	r6, r9
 800409e:	6026      	str	r6, [r4, #0]
 80040a0:	463e      	mov	r6, r7
 80040a2:	6165      	str	r5, [r4, #20]
 80040a4:	eba5 0509 	sub.w	r5, r5, r9
 80040a8:	60a5      	str	r5, [r4, #8]
 80040aa:	42be      	cmp	r6, r7
 80040ac:	d900      	bls.n	80040b0 <__ssputs_r+0x70>
 80040ae:	463e      	mov	r6, r7
 80040b0:	4632      	mov	r2, r6
 80040b2:	4641      	mov	r1, r8
 80040b4:	6820      	ldr	r0, [r4, #0]
 80040b6:	f000 faaf 	bl	8004618 <memmove>
 80040ba:	2000      	movs	r0, #0
 80040bc:	68a3      	ldr	r3, [r4, #8]
 80040be:	1b9b      	subs	r3, r3, r6
 80040c0:	60a3      	str	r3, [r4, #8]
 80040c2:	6823      	ldr	r3, [r4, #0]
 80040c4:	4433      	add	r3, r6
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040cc:	462a      	mov	r2, r5
 80040ce:	f000 fae9 	bl	80046a4 <_realloc_r>
 80040d2:	4606      	mov	r6, r0
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d1e0      	bne.n	800409a <__ssputs_r+0x5a>
 80040d8:	4650      	mov	r0, sl
 80040da:	6921      	ldr	r1, [r4, #16]
 80040dc:	f7ff febc 	bl	8003e58 <_free_r>
 80040e0:	230c      	movs	r3, #12
 80040e2:	f8ca 3000 	str.w	r3, [sl]
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040f0:	81a3      	strh	r3, [r4, #12]
 80040f2:	e7e9      	b.n	80040c8 <__ssputs_r+0x88>

080040f4 <_svfiprintf_r>:
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	4698      	mov	r8, r3
 80040fa:	898b      	ldrh	r3, [r1, #12]
 80040fc:	4607      	mov	r7, r0
 80040fe:	061b      	lsls	r3, r3, #24
 8004100:	460d      	mov	r5, r1
 8004102:	4614      	mov	r4, r2
 8004104:	b09d      	sub	sp, #116	; 0x74
 8004106:	d50e      	bpl.n	8004126 <_svfiprintf_r+0x32>
 8004108:	690b      	ldr	r3, [r1, #16]
 800410a:	b963      	cbnz	r3, 8004126 <_svfiprintf_r+0x32>
 800410c:	2140      	movs	r1, #64	; 0x40
 800410e:	f7ff ff0b 	bl	8003f28 <_malloc_r>
 8004112:	6028      	str	r0, [r5, #0]
 8004114:	6128      	str	r0, [r5, #16]
 8004116:	b920      	cbnz	r0, 8004122 <_svfiprintf_r+0x2e>
 8004118:	230c      	movs	r3, #12
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	e0d0      	b.n	80042c4 <_svfiprintf_r+0x1d0>
 8004122:	2340      	movs	r3, #64	; 0x40
 8004124:	616b      	str	r3, [r5, #20]
 8004126:	2300      	movs	r3, #0
 8004128:	9309      	str	r3, [sp, #36]	; 0x24
 800412a:	2320      	movs	r3, #32
 800412c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004130:	2330      	movs	r3, #48	; 0x30
 8004132:	f04f 0901 	mov.w	r9, #1
 8004136:	f8cd 800c 	str.w	r8, [sp, #12]
 800413a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80042dc <_svfiprintf_r+0x1e8>
 800413e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004142:	4623      	mov	r3, r4
 8004144:	469a      	mov	sl, r3
 8004146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800414a:	b10a      	cbz	r2, 8004150 <_svfiprintf_r+0x5c>
 800414c:	2a25      	cmp	r2, #37	; 0x25
 800414e:	d1f9      	bne.n	8004144 <_svfiprintf_r+0x50>
 8004150:	ebba 0b04 	subs.w	fp, sl, r4
 8004154:	d00b      	beq.n	800416e <_svfiprintf_r+0x7a>
 8004156:	465b      	mov	r3, fp
 8004158:	4622      	mov	r2, r4
 800415a:	4629      	mov	r1, r5
 800415c:	4638      	mov	r0, r7
 800415e:	f7ff ff6f 	bl	8004040 <__ssputs_r>
 8004162:	3001      	adds	r0, #1
 8004164:	f000 80a9 	beq.w	80042ba <_svfiprintf_r+0x1c6>
 8004168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800416a:	445a      	add	r2, fp
 800416c:	9209      	str	r2, [sp, #36]	; 0x24
 800416e:	f89a 3000 	ldrb.w	r3, [sl]
 8004172:	2b00      	cmp	r3, #0
 8004174:	f000 80a1 	beq.w	80042ba <_svfiprintf_r+0x1c6>
 8004178:	2300      	movs	r3, #0
 800417a:	f04f 32ff 	mov.w	r2, #4294967295
 800417e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004182:	f10a 0a01 	add.w	sl, sl, #1
 8004186:	9304      	str	r3, [sp, #16]
 8004188:	9307      	str	r3, [sp, #28]
 800418a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800418e:	931a      	str	r3, [sp, #104]	; 0x68
 8004190:	4654      	mov	r4, sl
 8004192:	2205      	movs	r2, #5
 8004194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004198:	4850      	ldr	r0, [pc, #320]	; (80042dc <_svfiprintf_r+0x1e8>)
 800419a:	f000 fa67 	bl	800466c <memchr>
 800419e:	9a04      	ldr	r2, [sp, #16]
 80041a0:	b9d8      	cbnz	r0, 80041da <_svfiprintf_r+0xe6>
 80041a2:	06d0      	lsls	r0, r2, #27
 80041a4:	bf44      	itt	mi
 80041a6:	2320      	movmi	r3, #32
 80041a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041ac:	0711      	lsls	r1, r2, #28
 80041ae:	bf44      	itt	mi
 80041b0:	232b      	movmi	r3, #43	; 0x2b
 80041b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80041b6:	f89a 3000 	ldrb.w	r3, [sl]
 80041ba:	2b2a      	cmp	r3, #42	; 0x2a
 80041bc:	d015      	beq.n	80041ea <_svfiprintf_r+0xf6>
 80041be:	4654      	mov	r4, sl
 80041c0:	2000      	movs	r0, #0
 80041c2:	f04f 0c0a 	mov.w	ip, #10
 80041c6:	9a07      	ldr	r2, [sp, #28]
 80041c8:	4621      	mov	r1, r4
 80041ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041ce:	3b30      	subs	r3, #48	; 0x30
 80041d0:	2b09      	cmp	r3, #9
 80041d2:	d94d      	bls.n	8004270 <_svfiprintf_r+0x17c>
 80041d4:	b1b0      	cbz	r0, 8004204 <_svfiprintf_r+0x110>
 80041d6:	9207      	str	r2, [sp, #28]
 80041d8:	e014      	b.n	8004204 <_svfiprintf_r+0x110>
 80041da:	eba0 0308 	sub.w	r3, r0, r8
 80041de:	fa09 f303 	lsl.w	r3, r9, r3
 80041e2:	4313      	orrs	r3, r2
 80041e4:	46a2      	mov	sl, r4
 80041e6:	9304      	str	r3, [sp, #16]
 80041e8:	e7d2      	b.n	8004190 <_svfiprintf_r+0x9c>
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	1d19      	adds	r1, r3, #4
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	9103      	str	r1, [sp, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	bfbb      	ittet	lt
 80041f6:	425b      	neglt	r3, r3
 80041f8:	f042 0202 	orrlt.w	r2, r2, #2
 80041fc:	9307      	strge	r3, [sp, #28]
 80041fe:	9307      	strlt	r3, [sp, #28]
 8004200:	bfb8      	it	lt
 8004202:	9204      	strlt	r2, [sp, #16]
 8004204:	7823      	ldrb	r3, [r4, #0]
 8004206:	2b2e      	cmp	r3, #46	; 0x2e
 8004208:	d10c      	bne.n	8004224 <_svfiprintf_r+0x130>
 800420a:	7863      	ldrb	r3, [r4, #1]
 800420c:	2b2a      	cmp	r3, #42	; 0x2a
 800420e:	d134      	bne.n	800427a <_svfiprintf_r+0x186>
 8004210:	9b03      	ldr	r3, [sp, #12]
 8004212:	3402      	adds	r4, #2
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	9203      	str	r2, [sp, #12]
 800421a:	2b00      	cmp	r3, #0
 800421c:	bfb8      	it	lt
 800421e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004222:	9305      	str	r3, [sp, #20]
 8004224:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80042e0 <_svfiprintf_r+0x1ec>
 8004228:	2203      	movs	r2, #3
 800422a:	4650      	mov	r0, sl
 800422c:	7821      	ldrb	r1, [r4, #0]
 800422e:	f000 fa1d 	bl	800466c <memchr>
 8004232:	b138      	cbz	r0, 8004244 <_svfiprintf_r+0x150>
 8004234:	2240      	movs	r2, #64	; 0x40
 8004236:	9b04      	ldr	r3, [sp, #16]
 8004238:	eba0 000a 	sub.w	r0, r0, sl
 800423c:	4082      	lsls	r2, r0
 800423e:	4313      	orrs	r3, r2
 8004240:	3401      	adds	r4, #1
 8004242:	9304      	str	r3, [sp, #16]
 8004244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004248:	2206      	movs	r2, #6
 800424a:	4826      	ldr	r0, [pc, #152]	; (80042e4 <_svfiprintf_r+0x1f0>)
 800424c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004250:	f000 fa0c 	bl	800466c <memchr>
 8004254:	2800      	cmp	r0, #0
 8004256:	d038      	beq.n	80042ca <_svfiprintf_r+0x1d6>
 8004258:	4b23      	ldr	r3, [pc, #140]	; (80042e8 <_svfiprintf_r+0x1f4>)
 800425a:	bb1b      	cbnz	r3, 80042a4 <_svfiprintf_r+0x1b0>
 800425c:	9b03      	ldr	r3, [sp, #12]
 800425e:	3307      	adds	r3, #7
 8004260:	f023 0307 	bic.w	r3, r3, #7
 8004264:	3308      	adds	r3, #8
 8004266:	9303      	str	r3, [sp, #12]
 8004268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800426a:	4433      	add	r3, r6
 800426c:	9309      	str	r3, [sp, #36]	; 0x24
 800426e:	e768      	b.n	8004142 <_svfiprintf_r+0x4e>
 8004270:	460c      	mov	r4, r1
 8004272:	2001      	movs	r0, #1
 8004274:	fb0c 3202 	mla	r2, ip, r2, r3
 8004278:	e7a6      	b.n	80041c8 <_svfiprintf_r+0xd4>
 800427a:	2300      	movs	r3, #0
 800427c:	f04f 0c0a 	mov.w	ip, #10
 8004280:	4619      	mov	r1, r3
 8004282:	3401      	adds	r4, #1
 8004284:	9305      	str	r3, [sp, #20]
 8004286:	4620      	mov	r0, r4
 8004288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800428c:	3a30      	subs	r2, #48	; 0x30
 800428e:	2a09      	cmp	r2, #9
 8004290:	d903      	bls.n	800429a <_svfiprintf_r+0x1a6>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0c6      	beq.n	8004224 <_svfiprintf_r+0x130>
 8004296:	9105      	str	r1, [sp, #20]
 8004298:	e7c4      	b.n	8004224 <_svfiprintf_r+0x130>
 800429a:	4604      	mov	r4, r0
 800429c:	2301      	movs	r3, #1
 800429e:	fb0c 2101 	mla	r1, ip, r1, r2
 80042a2:	e7f0      	b.n	8004286 <_svfiprintf_r+0x192>
 80042a4:	ab03      	add	r3, sp, #12
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	462a      	mov	r2, r5
 80042aa:	4638      	mov	r0, r7
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <_svfiprintf_r+0x1f8>)
 80042ae:	a904      	add	r1, sp, #16
 80042b0:	f3af 8000 	nop.w
 80042b4:	1c42      	adds	r2, r0, #1
 80042b6:	4606      	mov	r6, r0
 80042b8:	d1d6      	bne.n	8004268 <_svfiprintf_r+0x174>
 80042ba:	89ab      	ldrh	r3, [r5, #12]
 80042bc:	065b      	lsls	r3, r3, #25
 80042be:	f53f af2d 	bmi.w	800411c <_svfiprintf_r+0x28>
 80042c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042c4:	b01d      	add	sp, #116	; 0x74
 80042c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ca:	ab03      	add	r3, sp, #12
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	462a      	mov	r2, r5
 80042d0:	4638      	mov	r0, r7
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <_svfiprintf_r+0x1f8>)
 80042d4:	a904      	add	r1, sp, #16
 80042d6:	f000 f87d 	bl	80043d4 <_printf_i>
 80042da:	e7eb      	b.n	80042b4 <_svfiprintf_r+0x1c0>
 80042dc:	08004786 	.word	0x08004786
 80042e0:	0800478c 	.word	0x0800478c
 80042e4:	08004790 	.word	0x08004790
 80042e8:	00000000 	.word	0x00000000
 80042ec:	08004041 	.word	0x08004041

080042f0 <_printf_common>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	4616      	mov	r6, r2
 80042f6:	4699      	mov	r9, r3
 80042f8:	688a      	ldr	r2, [r1, #8]
 80042fa:	690b      	ldr	r3, [r1, #16]
 80042fc:	4607      	mov	r7, r0
 80042fe:	4293      	cmp	r3, r2
 8004300:	bfb8      	it	lt
 8004302:	4613      	movlt	r3, r2
 8004304:	6033      	str	r3, [r6, #0]
 8004306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800430a:	460c      	mov	r4, r1
 800430c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004310:	b10a      	cbz	r2, 8004316 <_printf_common+0x26>
 8004312:	3301      	adds	r3, #1
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	0699      	lsls	r1, r3, #26
 800431a:	bf42      	ittt	mi
 800431c:	6833      	ldrmi	r3, [r6, #0]
 800431e:	3302      	addmi	r3, #2
 8004320:	6033      	strmi	r3, [r6, #0]
 8004322:	6825      	ldr	r5, [r4, #0]
 8004324:	f015 0506 	ands.w	r5, r5, #6
 8004328:	d106      	bne.n	8004338 <_printf_common+0x48>
 800432a:	f104 0a19 	add.w	sl, r4, #25
 800432e:	68e3      	ldr	r3, [r4, #12]
 8004330:	6832      	ldr	r2, [r6, #0]
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	42ab      	cmp	r3, r5
 8004336:	dc2b      	bgt.n	8004390 <_printf_common+0xa0>
 8004338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800433c:	1e13      	subs	r3, r2, #0
 800433e:	6822      	ldr	r2, [r4, #0]
 8004340:	bf18      	it	ne
 8004342:	2301      	movne	r3, #1
 8004344:	0692      	lsls	r2, r2, #26
 8004346:	d430      	bmi.n	80043aa <_printf_common+0xba>
 8004348:	4649      	mov	r1, r9
 800434a:	4638      	mov	r0, r7
 800434c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004350:	47c0      	blx	r8
 8004352:	3001      	adds	r0, #1
 8004354:	d023      	beq.n	800439e <_printf_common+0xae>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	6922      	ldr	r2, [r4, #16]
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	2b04      	cmp	r3, #4
 8004360:	bf14      	ite	ne
 8004362:	2500      	movne	r5, #0
 8004364:	6833      	ldreq	r3, [r6, #0]
 8004366:	f04f 0600 	mov.w	r6, #0
 800436a:	bf08      	it	eq
 800436c:	68e5      	ldreq	r5, [r4, #12]
 800436e:	f104 041a 	add.w	r4, r4, #26
 8004372:	bf08      	it	eq
 8004374:	1aed      	subeq	r5, r5, r3
 8004376:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800437a:	bf08      	it	eq
 800437c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004380:	4293      	cmp	r3, r2
 8004382:	bfc4      	itt	gt
 8004384:	1a9b      	subgt	r3, r3, r2
 8004386:	18ed      	addgt	r5, r5, r3
 8004388:	42b5      	cmp	r5, r6
 800438a:	d11a      	bne.n	80043c2 <_printf_common+0xd2>
 800438c:	2000      	movs	r0, #0
 800438e:	e008      	b.n	80043a2 <_printf_common+0xb2>
 8004390:	2301      	movs	r3, #1
 8004392:	4652      	mov	r2, sl
 8004394:	4649      	mov	r1, r9
 8004396:	4638      	mov	r0, r7
 8004398:	47c0      	blx	r8
 800439a:	3001      	adds	r0, #1
 800439c:	d103      	bne.n	80043a6 <_printf_common+0xb6>
 800439e:	f04f 30ff 	mov.w	r0, #4294967295
 80043a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a6:	3501      	adds	r5, #1
 80043a8:	e7c1      	b.n	800432e <_printf_common+0x3e>
 80043aa:	2030      	movs	r0, #48	; 0x30
 80043ac:	18e1      	adds	r1, r4, r3
 80043ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043b8:	4422      	add	r2, r4
 80043ba:	3302      	adds	r3, #2
 80043bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043c0:	e7c2      	b.n	8004348 <_printf_common+0x58>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4622      	mov	r2, r4
 80043c6:	4649      	mov	r1, r9
 80043c8:	4638      	mov	r0, r7
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d0e6      	beq.n	800439e <_printf_common+0xae>
 80043d0:	3601      	adds	r6, #1
 80043d2:	e7d9      	b.n	8004388 <_printf_common+0x98>

080043d4 <_printf_i>:
 80043d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043d8:	7e0f      	ldrb	r7, [r1, #24]
 80043da:	4691      	mov	r9, r2
 80043dc:	2f78      	cmp	r7, #120	; 0x78
 80043de:	4680      	mov	r8, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	469a      	mov	sl, r3
 80043e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043ea:	d807      	bhi.n	80043fc <_printf_i+0x28>
 80043ec:	2f62      	cmp	r7, #98	; 0x62
 80043ee:	d80a      	bhi.n	8004406 <_printf_i+0x32>
 80043f0:	2f00      	cmp	r7, #0
 80043f2:	f000 80d5 	beq.w	80045a0 <_printf_i+0x1cc>
 80043f6:	2f58      	cmp	r7, #88	; 0x58
 80043f8:	f000 80c1 	beq.w	800457e <_printf_i+0x1aa>
 80043fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004404:	e03a      	b.n	800447c <_printf_i+0xa8>
 8004406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800440a:	2b15      	cmp	r3, #21
 800440c:	d8f6      	bhi.n	80043fc <_printf_i+0x28>
 800440e:	a101      	add	r1, pc, #4	; (adr r1, 8004414 <_printf_i+0x40>)
 8004410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004414:	0800446d 	.word	0x0800446d
 8004418:	08004481 	.word	0x08004481
 800441c:	080043fd 	.word	0x080043fd
 8004420:	080043fd 	.word	0x080043fd
 8004424:	080043fd 	.word	0x080043fd
 8004428:	080043fd 	.word	0x080043fd
 800442c:	08004481 	.word	0x08004481
 8004430:	080043fd 	.word	0x080043fd
 8004434:	080043fd 	.word	0x080043fd
 8004438:	080043fd 	.word	0x080043fd
 800443c:	080043fd 	.word	0x080043fd
 8004440:	08004587 	.word	0x08004587
 8004444:	080044ad 	.word	0x080044ad
 8004448:	08004541 	.word	0x08004541
 800444c:	080043fd 	.word	0x080043fd
 8004450:	080043fd 	.word	0x080043fd
 8004454:	080045a9 	.word	0x080045a9
 8004458:	080043fd 	.word	0x080043fd
 800445c:	080044ad 	.word	0x080044ad
 8004460:	080043fd 	.word	0x080043fd
 8004464:	080043fd 	.word	0x080043fd
 8004468:	08004549 	.word	0x08004549
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	1d1a      	adds	r2, r3, #4
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	602a      	str	r2, [r5, #0]
 8004474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800447c:	2301      	movs	r3, #1
 800447e:	e0a0      	b.n	80045c2 <_printf_i+0x1ee>
 8004480:	6820      	ldr	r0, [r4, #0]
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	0607      	lsls	r7, r0, #24
 8004486:	f103 0104 	add.w	r1, r3, #4
 800448a:	6029      	str	r1, [r5, #0]
 800448c:	d501      	bpl.n	8004492 <_printf_i+0xbe>
 800448e:	681e      	ldr	r6, [r3, #0]
 8004490:	e003      	b.n	800449a <_printf_i+0xc6>
 8004492:	0646      	lsls	r6, r0, #25
 8004494:	d5fb      	bpl.n	800448e <_printf_i+0xba>
 8004496:	f9b3 6000 	ldrsh.w	r6, [r3]
 800449a:	2e00      	cmp	r6, #0
 800449c:	da03      	bge.n	80044a6 <_printf_i+0xd2>
 800449e:	232d      	movs	r3, #45	; 0x2d
 80044a0:	4276      	negs	r6, r6
 80044a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044a6:	230a      	movs	r3, #10
 80044a8:	4859      	ldr	r0, [pc, #356]	; (8004610 <_printf_i+0x23c>)
 80044aa:	e012      	b.n	80044d2 <_printf_i+0xfe>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	1d19      	adds	r1, r3, #4
 80044b2:	6029      	str	r1, [r5, #0]
 80044b4:	0605      	lsls	r5, r0, #24
 80044b6:	d501      	bpl.n	80044bc <_printf_i+0xe8>
 80044b8:	681e      	ldr	r6, [r3, #0]
 80044ba:	e002      	b.n	80044c2 <_printf_i+0xee>
 80044bc:	0641      	lsls	r1, r0, #25
 80044be:	d5fb      	bpl.n	80044b8 <_printf_i+0xe4>
 80044c0:	881e      	ldrh	r6, [r3, #0]
 80044c2:	2f6f      	cmp	r7, #111	; 0x6f
 80044c4:	bf0c      	ite	eq
 80044c6:	2308      	moveq	r3, #8
 80044c8:	230a      	movne	r3, #10
 80044ca:	4851      	ldr	r0, [pc, #324]	; (8004610 <_printf_i+0x23c>)
 80044cc:	2100      	movs	r1, #0
 80044ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044d2:	6865      	ldr	r5, [r4, #4]
 80044d4:	2d00      	cmp	r5, #0
 80044d6:	bfa8      	it	ge
 80044d8:	6821      	ldrge	r1, [r4, #0]
 80044da:	60a5      	str	r5, [r4, #8]
 80044dc:	bfa4      	itt	ge
 80044de:	f021 0104 	bicge.w	r1, r1, #4
 80044e2:	6021      	strge	r1, [r4, #0]
 80044e4:	b90e      	cbnz	r6, 80044ea <_printf_i+0x116>
 80044e6:	2d00      	cmp	r5, #0
 80044e8:	d04b      	beq.n	8004582 <_printf_i+0x1ae>
 80044ea:	4615      	mov	r5, r2
 80044ec:	fbb6 f1f3 	udiv	r1, r6, r3
 80044f0:	fb03 6711 	mls	r7, r3, r1, r6
 80044f4:	5dc7      	ldrb	r7, [r0, r7]
 80044f6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044fa:	4637      	mov	r7, r6
 80044fc:	42bb      	cmp	r3, r7
 80044fe:	460e      	mov	r6, r1
 8004500:	d9f4      	bls.n	80044ec <_printf_i+0x118>
 8004502:	2b08      	cmp	r3, #8
 8004504:	d10b      	bne.n	800451e <_printf_i+0x14a>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	07de      	lsls	r6, r3, #31
 800450a:	d508      	bpl.n	800451e <_printf_i+0x14a>
 800450c:	6923      	ldr	r3, [r4, #16]
 800450e:	6861      	ldr	r1, [r4, #4]
 8004510:	4299      	cmp	r1, r3
 8004512:	bfde      	ittt	le
 8004514:	2330      	movle	r3, #48	; 0x30
 8004516:	f805 3c01 	strble.w	r3, [r5, #-1]
 800451a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800451e:	1b52      	subs	r2, r2, r5
 8004520:	6122      	str	r2, [r4, #16]
 8004522:	464b      	mov	r3, r9
 8004524:	4621      	mov	r1, r4
 8004526:	4640      	mov	r0, r8
 8004528:	f8cd a000 	str.w	sl, [sp]
 800452c:	aa03      	add	r2, sp, #12
 800452e:	f7ff fedf 	bl	80042f0 <_printf_common>
 8004532:	3001      	adds	r0, #1
 8004534:	d14a      	bne.n	80045cc <_printf_i+0x1f8>
 8004536:	f04f 30ff 	mov.w	r0, #4294967295
 800453a:	b004      	add	sp, #16
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f043 0320 	orr.w	r3, r3, #32
 8004546:	6023      	str	r3, [r4, #0]
 8004548:	2778      	movs	r7, #120	; 0x78
 800454a:	4832      	ldr	r0, [pc, #200]	; (8004614 <_printf_i+0x240>)
 800454c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	6829      	ldr	r1, [r5, #0]
 8004554:	061f      	lsls	r7, r3, #24
 8004556:	f851 6b04 	ldr.w	r6, [r1], #4
 800455a:	d402      	bmi.n	8004562 <_printf_i+0x18e>
 800455c:	065f      	lsls	r7, r3, #25
 800455e:	bf48      	it	mi
 8004560:	b2b6      	uxthmi	r6, r6
 8004562:	07df      	lsls	r7, r3, #31
 8004564:	bf48      	it	mi
 8004566:	f043 0320 	orrmi.w	r3, r3, #32
 800456a:	6029      	str	r1, [r5, #0]
 800456c:	bf48      	it	mi
 800456e:	6023      	strmi	r3, [r4, #0]
 8004570:	b91e      	cbnz	r6, 800457a <_printf_i+0x1a6>
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f023 0320 	bic.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	2310      	movs	r3, #16
 800457c:	e7a6      	b.n	80044cc <_printf_i+0xf8>
 800457e:	4824      	ldr	r0, [pc, #144]	; (8004610 <_printf_i+0x23c>)
 8004580:	e7e4      	b.n	800454c <_printf_i+0x178>
 8004582:	4615      	mov	r5, r2
 8004584:	e7bd      	b.n	8004502 <_printf_i+0x12e>
 8004586:	682b      	ldr	r3, [r5, #0]
 8004588:	6826      	ldr	r6, [r4, #0]
 800458a:	1d18      	adds	r0, r3, #4
 800458c:	6961      	ldr	r1, [r4, #20]
 800458e:	6028      	str	r0, [r5, #0]
 8004590:	0635      	lsls	r5, r6, #24
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	d501      	bpl.n	800459a <_printf_i+0x1c6>
 8004596:	6019      	str	r1, [r3, #0]
 8004598:	e002      	b.n	80045a0 <_printf_i+0x1cc>
 800459a:	0670      	lsls	r0, r6, #25
 800459c:	d5fb      	bpl.n	8004596 <_printf_i+0x1c2>
 800459e:	8019      	strh	r1, [r3, #0]
 80045a0:	2300      	movs	r3, #0
 80045a2:	4615      	mov	r5, r2
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	e7bc      	b.n	8004522 <_printf_i+0x14e>
 80045a8:	682b      	ldr	r3, [r5, #0]
 80045aa:	2100      	movs	r1, #0
 80045ac:	1d1a      	adds	r2, r3, #4
 80045ae:	602a      	str	r2, [r5, #0]
 80045b0:	681d      	ldr	r5, [r3, #0]
 80045b2:	6862      	ldr	r2, [r4, #4]
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f859 	bl	800466c <memchr>
 80045ba:	b108      	cbz	r0, 80045c0 <_printf_i+0x1ec>
 80045bc:	1b40      	subs	r0, r0, r5
 80045be:	6060      	str	r0, [r4, #4]
 80045c0:	6863      	ldr	r3, [r4, #4]
 80045c2:	6123      	str	r3, [r4, #16]
 80045c4:	2300      	movs	r3, #0
 80045c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ca:	e7aa      	b.n	8004522 <_printf_i+0x14e>
 80045cc:	462a      	mov	r2, r5
 80045ce:	4649      	mov	r1, r9
 80045d0:	4640      	mov	r0, r8
 80045d2:	6923      	ldr	r3, [r4, #16]
 80045d4:	47d0      	blx	sl
 80045d6:	3001      	adds	r0, #1
 80045d8:	d0ad      	beq.n	8004536 <_printf_i+0x162>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	079b      	lsls	r3, r3, #30
 80045de:	d413      	bmi.n	8004608 <_printf_i+0x234>
 80045e0:	68e0      	ldr	r0, [r4, #12]
 80045e2:	9b03      	ldr	r3, [sp, #12]
 80045e4:	4298      	cmp	r0, r3
 80045e6:	bfb8      	it	lt
 80045e8:	4618      	movlt	r0, r3
 80045ea:	e7a6      	b.n	800453a <_printf_i+0x166>
 80045ec:	2301      	movs	r3, #1
 80045ee:	4632      	mov	r2, r6
 80045f0:	4649      	mov	r1, r9
 80045f2:	4640      	mov	r0, r8
 80045f4:	47d0      	blx	sl
 80045f6:	3001      	adds	r0, #1
 80045f8:	d09d      	beq.n	8004536 <_printf_i+0x162>
 80045fa:	3501      	adds	r5, #1
 80045fc:	68e3      	ldr	r3, [r4, #12]
 80045fe:	9903      	ldr	r1, [sp, #12]
 8004600:	1a5b      	subs	r3, r3, r1
 8004602:	42ab      	cmp	r3, r5
 8004604:	dcf2      	bgt.n	80045ec <_printf_i+0x218>
 8004606:	e7eb      	b.n	80045e0 <_printf_i+0x20c>
 8004608:	2500      	movs	r5, #0
 800460a:	f104 0619 	add.w	r6, r4, #25
 800460e:	e7f5      	b.n	80045fc <_printf_i+0x228>
 8004610:	08004797 	.word	0x08004797
 8004614:	080047a8 	.word	0x080047a8

08004618 <memmove>:
 8004618:	4288      	cmp	r0, r1
 800461a:	b510      	push	{r4, lr}
 800461c:	eb01 0402 	add.w	r4, r1, r2
 8004620:	d902      	bls.n	8004628 <memmove+0x10>
 8004622:	4284      	cmp	r4, r0
 8004624:	4623      	mov	r3, r4
 8004626:	d807      	bhi.n	8004638 <memmove+0x20>
 8004628:	1e43      	subs	r3, r0, #1
 800462a:	42a1      	cmp	r1, r4
 800462c:	d008      	beq.n	8004640 <memmove+0x28>
 800462e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004632:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004636:	e7f8      	b.n	800462a <memmove+0x12>
 8004638:	4601      	mov	r1, r0
 800463a:	4402      	add	r2, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	d100      	bne.n	8004642 <memmove+0x2a>
 8004640:	bd10      	pop	{r4, pc}
 8004642:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004646:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800464a:	e7f7      	b.n	800463c <memmove+0x24>

0800464c <_sbrk_r>:
 800464c:	b538      	push	{r3, r4, r5, lr}
 800464e:	2300      	movs	r3, #0
 8004650:	4d05      	ldr	r5, [pc, #20]	; (8004668 <_sbrk_r+0x1c>)
 8004652:	4604      	mov	r4, r0
 8004654:	4608      	mov	r0, r1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	f7fc ff1a 	bl	8001490 <_sbrk>
 800465c:	1c43      	adds	r3, r0, #1
 800465e:	d102      	bne.n	8004666 <_sbrk_r+0x1a>
 8004660:	682b      	ldr	r3, [r5, #0]
 8004662:	b103      	cbz	r3, 8004666 <_sbrk_r+0x1a>
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	20000378 	.word	0x20000378

0800466c <memchr>:
 800466c:	4603      	mov	r3, r0
 800466e:	b510      	push	{r4, lr}
 8004670:	b2c9      	uxtb	r1, r1
 8004672:	4402      	add	r2, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	4618      	mov	r0, r3
 8004678:	d101      	bne.n	800467e <memchr+0x12>
 800467a:	2000      	movs	r0, #0
 800467c:	e003      	b.n	8004686 <memchr+0x1a>
 800467e:	7804      	ldrb	r4, [r0, #0]
 8004680:	3301      	adds	r3, #1
 8004682:	428c      	cmp	r4, r1
 8004684:	d1f6      	bne.n	8004674 <memchr+0x8>
 8004686:	bd10      	pop	{r4, pc}

08004688 <memcpy>:
 8004688:	440a      	add	r2, r1
 800468a:	4291      	cmp	r1, r2
 800468c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004690:	d100      	bne.n	8004694 <memcpy+0xc>
 8004692:	4770      	bx	lr
 8004694:	b510      	push	{r4, lr}
 8004696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800469a:	4291      	cmp	r1, r2
 800469c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a0:	d1f9      	bne.n	8004696 <memcpy+0xe>
 80046a2:	bd10      	pop	{r4, pc}

080046a4 <_realloc_r>:
 80046a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a8:	4680      	mov	r8, r0
 80046aa:	4614      	mov	r4, r2
 80046ac:	460e      	mov	r6, r1
 80046ae:	b921      	cbnz	r1, 80046ba <_realloc_r+0x16>
 80046b0:	4611      	mov	r1, r2
 80046b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046b6:	f7ff bc37 	b.w	8003f28 <_malloc_r>
 80046ba:	b92a      	cbnz	r2, 80046c8 <_realloc_r+0x24>
 80046bc:	f7ff fbcc 	bl	8003e58 <_free_r>
 80046c0:	4625      	mov	r5, r4
 80046c2:	4628      	mov	r0, r5
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046c8:	f000 f81b 	bl	8004702 <_malloc_usable_size_r>
 80046cc:	4284      	cmp	r4, r0
 80046ce:	4607      	mov	r7, r0
 80046d0:	d802      	bhi.n	80046d8 <_realloc_r+0x34>
 80046d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80046d6:	d812      	bhi.n	80046fe <_realloc_r+0x5a>
 80046d8:	4621      	mov	r1, r4
 80046da:	4640      	mov	r0, r8
 80046dc:	f7ff fc24 	bl	8003f28 <_malloc_r>
 80046e0:	4605      	mov	r5, r0
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d0ed      	beq.n	80046c2 <_realloc_r+0x1e>
 80046e6:	42bc      	cmp	r4, r7
 80046e8:	4622      	mov	r2, r4
 80046ea:	4631      	mov	r1, r6
 80046ec:	bf28      	it	cs
 80046ee:	463a      	movcs	r2, r7
 80046f0:	f7ff ffca 	bl	8004688 <memcpy>
 80046f4:	4631      	mov	r1, r6
 80046f6:	4640      	mov	r0, r8
 80046f8:	f7ff fbae 	bl	8003e58 <_free_r>
 80046fc:	e7e1      	b.n	80046c2 <_realloc_r+0x1e>
 80046fe:	4635      	mov	r5, r6
 8004700:	e7df      	b.n	80046c2 <_realloc_r+0x1e>

08004702 <_malloc_usable_size_r>:
 8004702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004706:	1f18      	subs	r0, r3, #4
 8004708:	2b00      	cmp	r3, #0
 800470a:	bfbc      	itt	lt
 800470c:	580b      	ldrlt	r3, [r1, r0]
 800470e:	18c0      	addlt	r0, r0, r3
 8004710:	4770      	bx	lr
	...

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr
